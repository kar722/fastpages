{
  
    
        "post0": {
            "title": "Week 4 Free Response Question No. 1",
            "content": "Hacks . Issue . FRQ No. 1: Methods and control structures . 2007 AP CSA Free Response Question | . Iteration with 2D Array . Iteration with 2D Array Hack - 2018 WC | . Iteration with 2D Array Questions . Is this program in more of an Imperative Programming Style or OOP style? Explain. . This program is a more object oriented style as objects and variables such as the MonkeyLoop are stored and later accessed in the public void variable printPoem. | The monkeys seem to act as an object in the program. | . Loops Process . Initialization: It is the initial condition which is executed once when the loop starts. Here, we can initialize the variable, or we can use an already initialized variable. It is an optional condition. | Condition: It is the second condition which is executed each time to test the condition of the loop. It continues execution until the condition is false. It must return boolean value either true or false. It is an optional condition. | Increment/Decrement: It increments or decrements the variable value. It is an optional condition. | Statement: The statement of the loop is executed each time until the second condition is false. | . Zero based counting . Zero-based numbering is a way of numbering in which the initial element of a sequence is assigned the index 0, rather than the index 1. | . Declaring 2D Arrays . In Java, 2D arrays are stored as arrays of arrays. Therefore, the way 2D arrays are declared is similar 1D array objects. 2D arrays are declared by defining a data type followed by two sets of square brackets. | . Accessing 2D Array Elements . In Java, when accessing the element from a 2D array using arr[first][second], the first index can be thought of as the desired row, and the second index is used for the desired column. Just like 1D arrays, 2D arrays are indexed starting at 0. | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/09/18/Week-4-Learnings.html",
            "relUrl": "/markdown/2022/09/18/Week-4-Learnings.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Iteration with 2D Array Hack - 2018 WC",
            "content": "/** * Class for wcTeams: a 2D array of wcTeams * As well as method to print the Poem */ class WcLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] wcTeams; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of wcTeams */ public WcLoop() { //Storing Data in 2D arrays wcTeams = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //France { &quot;France (Antoine Griezmann)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__7__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Croatia { &quot;Croatia (Luka Modric)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__10__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Belgium { &quot;Belgium (Eden Hazard)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__10__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //England { &quot;England (Harry Kane)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__10__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Russia { &quot;Russia (Denis Cheryshev)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__6__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Brazil { &quot;Brazil (Neymar Jr.)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__10__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Uruguay { &quot;Uruguay (Luis Suarez)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__9__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Sweden { &quot;Sweden (Emil Forsberg)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__10__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, }; } /** * Loop and print wcTeams in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;2018 World Cup Quarter Finalists&quot;); // wcTeams (non-primitive) defined in constructor knows its length int teamsCount = wcTeams.length; for (int i = teamsCount; i &gt;= 1; i/=2) //loops through 2D array length backwards { //this print statement shows current count of wcTeams // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; wcTeams left...&quot;); //how many separate parts are there in a world cup teams world cup teams? for (int row = 0; row &lt; teamsCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each world cup teams part by part, will eventually print entire column*/ for (int col = 0; col &lt; wcTeams[row].length; col++) { // prints specific part of the world cup teams from the column System.out.print(wcTeams[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing teamsCount variable by 1 teamsCount /= 2; } //out of all the loops, prints finishing messages System.out.println(&quot;France Wins the WC&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); System.out.println(&quot; .-=========-.&quot;); System.out.println(&quot; /&#39;-=======-&#39;/&quot;); System.out.println(&quot; _| .=. |_&quot;); System.out.println(&quot; ((|{{France}}|))&quot;); System.out.println(&quot; /| /|/ |/&quot;); System.out.println(&quot; /_2018_WC__/&quot;); System.out.println(&quot; _`) (`_ &quot;); System.out.println(&quot; _/_______/_&quot;); System.out.println(&quot; //___________ &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new WcLoop().printPoem(); //a new world cup teams list and output in one step } } WcLoop.main(null); . 2018 World Cup Quarter Finalists 8 wcTeams left... France (Antoine Griezmann) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__7__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Croatia (Luka Modric) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Belgium (Eden Hazard) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. England (Harry Kane) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Russia (Denis Cheryshev) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__6__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Brazil (Neymar Jr.) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Uruguay (Luis Suarez) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__9__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Sweden (Emil Forsberg) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. 4 wcTeams left... France (Antoine Griezmann) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__7__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Croatia (Luka Modric) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Belgium (Eden Hazard) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. England (Harry Kane) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. 2 wcTeams left... France (Antoine Griezmann) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__7__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Croatia (Luka Modric) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. 1 wcTeams left... France (Antoine Griezmann) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__7__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. France Wins the WC 0000000000000000000000000000000000 THE END .-=========-. /&#39;-=======-&#39;/ _| .=. |_ ((|{{France}}|)) /| /|/ |/ /_2018_WC__/ _`) (`_ _/_______/_ //___________ .",
            "url": "https://kar722.github.io/fastpages/2022/09/18/2D-Iteration-Array-Jupyter-Notebook.html",
            "relUrl": "/2022/09/18/2D-Iteration-Array-Jupyter-Notebook.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Bash Week 1 Notebook",
            "content": "ls . 2020-02-20-test.ipynb* 2022-21-08-Java-Jupyter-Notebook.ipynb* 2022-21-08-Python-Jupyter-Notebook.ipynb* 2022-28-08-Bash-Jupyter-Notebook.ipynb* 2022-28-08-Java-Primitives-Jupyter-Notebook.ipynb* README.md* ghtop_images/ my_icons/ . !python --version . Python 3.9.12 . !python2 --version . Python 2.7.18 . !java --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) . !javac --version . javac 11.0.16 . !conda --version . conda 4.14.0 . conda list | grep &quot;jupyter&quot; . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 Note: you may need to restart the kernel to use updated packages. . !juypter --version . /bin/bash: juypter: command not found . !jupyter kernelspec list . Available kernels: java /home/kar/.local/share/jupyter/kernels/java javascript /home/kar/.local/share/jupyter/kernels/javascript python3 /home/kar/.local/share/jupyter/kernels/python3 . !npm -version . 3.10.10 .",
            "url": "https://kar722.github.io/fastpages/2022/09/17/Bash-Jupyter-Notebook.html",
            "relUrl": "/2022/09/17/Bash-Jupyter-Notebook.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "2007 AP CSA Free Response Question",
            "content": "Source: https://secure-media.collegeboard.org/apc/ap07_comp_sci_a_frq.pdf . 1. A positive integer is called a &quot;self-divisor&quot; if every decimal digit of the number is a divisor of the number, that is, the number is evenly divisible by each and every one of its digits. For example, the number 128 is a selfdivisor because it is evenly divisible by 1, 2, and 8. However, 26 is not a self-divisor because it is not evenly divisible by the digit 6. Note that 0 is not considered to be a divisor of any number, so any number containing a 0 digit is NOT a self-divisor. There are infinitely many self-divisors. . (a) Write method isSelfDivisor, which takes a positive integer as its parameter. This method returns true if the number is a self-divisor; otherwise, it returns false. . Complete method isSelfDivisor below . /** @param number the number to be tested * Precondition: number 0 &gt; * @return true if every decimal digit of number is a divisor of number; * false otherwise */ public static boolean isSelfDivisor(int number) { int copyNumber = number; // define int copy of number so original number is not altered while (number &gt; 0) { // number has to be greater than 0 int lastDigit = number % 10; // to retract the last digit of the number ex: 135/10 = 130 R 5 --&gt; 135 % 10 is 5 --&gt; 5 is also the last digit if (lastDigit == 0 || copyNumber % lastDigit != 0) { // if last digit is equal to 0 then the number is not a self divisor as any number/0 is undefined // OR if the remainder of the number divided by its last digit does NOT give you 0 then the number is not a self divisor return false; } number /= 10; // divide number by 10 and make number the result same as number = number/10 // iterate through the loop until the all digits in the number are checked to be divisible with the number } return true; } // Tester System.out.println(&quot;128: &quot; + isSelfDivisor(128)); System.out.println(&quot;26: &quot; + isSelfDivisor(26)); . 128: true 26: false . (b) Write method firstNumSelfDivisors, which takes two positive integers as parameters, representing a start value and a number of values. Method firstNumSelfDivisors returns an array of size num that contains the first num self-divisors that are greater than or equal to start. . For example, the call firstNumSelfDivisors(10, 3) should return an array containing the values 11, 12, and 15, because the first three self-divisors that are greater than or equal to 10 are 11, 12, and 15. In writing firstNumSelfDivisors, assume that isSelfDivisor works as specified, regardless of what you wrote in part (a). . Complete method firstNumSelfDivisors below. . public static boolean isSelfDivisor(int number) { int copyNumber = number; // define int copy of number so original number is not altered while (number &gt; 0) { // number has to be greater than 0 int lastDigit = number % 10; // to retract the last digit of the number ex: 135/10 = 130 R 5 --&gt; 135 % 10 is 5 --&gt; 5 is also the last digit if (lastDigit == 0 || copyNumber % lastDigit != 0) { // if last digit is equal to 0 then the number is not a self divisor as any number/0 is undefined // OR if the remainder of the number divided by its last digit does NOT give you 0 then the number is not a self divisor return false; } number /= 10; // divide number by 10 and make number the result same as number = number/10 // iterate through the loop until the all digits in the number are checked to be divisible with the number } return true; } /** * @param start starting point for values to be checked * Precondition: start &gt; 0 * @param num the size of the array to be returned * Precondition: num 0 &gt; * @return an array containing the first num integers ≥ start that are * self-divisors */ public static int[] firstNumSelfDivisors(int start, int num) { int[] selfs = new int[num]; // make an array of integers, num is the amount of numbers we want inside of it int index = 0; // start index at 0 while (index &lt; num) { // as long as the index is less than the last number if (isSelfDivisor(start)) { // iterate through the numbers starting with the first number, &#39;start&#39; to check if they are self divisors selfs[index] = start; // if isSelfDivisor returns true --&gt; add number to the empty array index++; // go onto the next index } start++; // go onto the next value } return selfs; // return array } // Tester System.out.println(&quot;Self Divisors from 10 - 3: &quot;); for (int n : firstNumSelfDivisors(10, 3)) { System.out.print(n + &quot;, &quot;); } . Self Divisors from 10 - 3: 11, 12, 15, . Full 2007 Q1 Code . public class Main { /*** Part A ***/ /** * @param number the number to be tested * Precondition: number &gt; 0 * @return true if every decimal digit of number is a divisor of number; * false otherwise */ public static boolean isSelfDivisor(int number) { int copyNumber = number; // define int copy of number so original number is not altered while (number &gt; 0) { // number has to be greater than 0 int lastDigit = number % 10; // to retract the last digit of the number ex: 135/10 = 130 R 5 --&gt; 135 % 10 is 5 --&gt; 5 is also the last digit if (lastDigit == 0 || copyNumber % lastDigit != 0) { // if last digit is equal to 0 then the number is not a self divisor as any number/0 is undefined // OR if the remainder of the number divided by its last digit does NOT give you 0 then the number is not a self divisor return false; } number /= 10; // divide number by 10 and make number the result same as number = number/10 // iterate through the loop until the all digits in the number are checked to be divisible with the number } return true; } /*** Part B ***/ /** * @param start starting point for values to be checked * Precondition: start &gt; 0 * @param num the size of the array to be returned * Precondition: num 0 &gt; * @return an array containing the first num integers ≥ start that are * self-divisors */ public static int[] firstNumSelfDivisors(int start, int num) { int[] selfs = new int[num]; // make an array of integers, num is the amount of numbers we want inside of it int index = 0; // start index at 0 while (index &lt; num) { // as long as the index is less than the last number if (isSelfDivisor(start)) { // iterate through the numbers starting with the first number, &#39;start&#39; to check if they are self divisors selfs[index] = start; // if isSelfDivisor returns true --&gt; add number to the empty array index++; // go onto the next index } start++; // go onto the next value } return selfs; // return array } // Test example values from the question public static void main(String[] args) { System.out.println(&quot;128 &quot; + isSelfDivisor(128)); System.out.println(&quot;26: &quot; + isSelfDivisor(26)); // print the array System.out.println(&quot;Self Divisors from 10 - 3: &quot;); for (int n : firstNumSelfDivisors(10, 3)) { System.out.print(n + &quot;, &quot;); } } } Main.main(null) . 128 true 26: false Self Divisors from 10 - 3: 11, 12, 15, . Resources . https://www.tutorialspoint.com/java/java_basic_operators.htm | https://www.edureka.co/community/2687/how-can-i-separate-the-digits-of-an-int-number-in-java | https://www.w3schools.com/java/java_arrays.asp | https://www.programiz.com/article/increment-decrement-operator-difference-prefix-postfix | https://www.programiz.com/java-programming/examples/print-array | .",
            "url": "https://kar722.github.io/fastpages/2022/09/15/FRQ-1-Juypter-Notebook.html",
            "relUrl": "/2022/09/15/FRQ-1-Juypter-Notebook.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Week 3 Backend Development",
            "content": "Hacks . Issue . Fastpages Boolean Expressions and If Statements Notebook . Java Notebook | . Deployment . URL . | Repo . | . Focus/Habits . Post | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/09/11/Week-3-Backend-Development-Notebook.html",
            "relUrl": "/markdown/2022/09/11/Week-3-Backend-Development-Notebook.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Week 3 Focus/Habits",
            "content": "Life goals . Bench 225 | . | Boxing Evan | . | Get a high paying job | . | Buy my parents a mansion | . | Lamborghini | . | . Psychology and the Good Life . Simply getting better after therapy doesn’t tell you anything. | It just means that the day after the worst day of your life usually is not as bad as the worst day of your life. It can get worse, but usually it just trends to average. | So, this is for people who are depressed. This is statistically equal. | It’s random, which is — which — making it a very good experiment. | was very depressing but the good news is that in some sense I had some hope and I had some hope because I’m an academic | psychologist I studied decision making in primates but I study the field of psychology broadly and knowing that I | had expertise on the idea that we could do something there is kind of a light bulb moment where I realized that the | science of psychology neuroscience all the mine sciences could help us here and | get more meaning in your life and the science comes from two different domains one domain is this domain of positive | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/09/11/Psychology-and-the-Good-Life.html",
            "relUrl": "/markdown/2022/09/11/Psychology-and-the-Good-Life.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Jupyter Notebook Lesson on "if" Statements",
            "content": "if statements are used to run a method based on if something specifically described happens. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (x &gt; y) { System.out.println(x + &quot; is greater than &quot; + y); } . Enter the first number: 12.2 Enter the second number: 4.7 12.2 is greater than 4.7 . if-else -- if the specific condition is true then proceed below and run the method BUT if the condition is false then proceed with the different set of instructions defined . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (x &gt; y) { System.out.println(x + &quot; is greater than &quot; + y); } else { System.out.println(y + &quot; is greater than &quot; + x); } . Enter the first number: 3.9 Enter the second number: 5.78 5.78 is greater than 3.9 . if-elseif-else -- if the specific condition is true then proceed below and run the method BUT if the condition is not met try the next condition and if the condition is met run this code segment now if both of the conditions are false then proceed with the different set of instructions defined . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (x &gt; y) { System.out.println(x + &quot; is greater than &quot; + y); } else if (x == y) { System.out.println(x + &quot; is equal to &quot; + y); } else { System.out.println(y + &quot; is greater than &quot; + x); } . Enter the first number: 11.78 Enter the second number: 11.78 11.78 is equal to 11.78 . Create and if-elseif-elseif-elsif-else statement, 5 or more conditions. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the operator (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (operator == &#39;+&#39;) { System.out.println(x + y); } else if (operator == &#39;-&#39;) { System.out.println(x - y); } else if (operator == &#39;*&#39;) { System.out.println(x * y); } else if (operator == &#39;/&#39;) { System.out.println(x / y); } else { System.out.println(&quot;Invalid operator&quot;); } . Enter the first number: 44.1 Enter the operator (+,-,*,/): / Enter the second number: 5.3 8.320754716981133 . Covert the 5 or more decisions to a switch-case-case-case-case-otherwise. . double num1, num2; // Take input from the user Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter the first number: &quot;); // take the inputs num1 = scanner.nextDouble(); System.out.println(num1); System.out.print(&quot;Enter the operator (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;Enter second number: &quot;); num2 = scanner.nextDouble(); System.out.println(num2); double output = 0; switch (operator) { // case to add two numbers case &#39;+&#39;: output = num1 + num2; break; // case to subtract two numbers case &#39;-&#39;: output = num1 - num2; break; // case to multiply two numbers case &#39;*&#39;: output = num1 * num2; break; // case to divide two numbers case &#39;/&#39;: output = num1 / num2; break; default: System.out.println(&quot;Invalid input&quot;); break; } System.out.println(&quot;The final result: &quot;); // print the final result System.out.println(num1 + &quot; &quot; + operator + &quot; &quot; + num2 + &quot; = &quot; + output); . Enter the first number: 45.0 Enter the operator (+,-,*,/): / Enter second number: 4.4 The final result: 45.0 / 4.4 = 10.227272727272727 . De Morgan&#39;s Law . DeMorgan’s laws were developed by Augustus De Morgan in the 1800s. They show how to handle the negation of a complex conditional, which is a conditional statement with more than one condition joined by an and (&amp;&amp;) or or (||), such as (x &lt; 3) &amp;&amp; (y &gt; 2). . not (a and b) is the same as (not a) or (not b). In Java this is written as !(a &amp;&amp; b) == !a || !b . not (a or b) is the same as (not a) and (not b). In Java this is written as !(a || b) == !a &amp;&amp; !b . The negation modifies each conditional: . &lt; becomes &gt;= | becomes &lt;= . | == becomes != | &lt;= becomes &gt; | = becomes &lt; . | != becomes == | . public class DeMorgansAndTest { public static void main(String[] args) { int x = 7; int y = 16; System.out.println(!(x &gt; 6 &amp;&amp; y &lt; 3)); // prints true if x is not &gt; 6 OR y is not &lt; 3 // prints false otherwise // this output should be true as x IS &gt; 6 BUT y IS NOT &lt; 3 } } DeMorgansAndTest.main(null) . true . public class DeMorgansOrTest { public static void main(String[] args) { int x = 0; int y = 5; System.out.println(!(x &lt; 3 || y &gt; 2)); // prints true if x is not &lt; 3 AND y is not &gt; 2 // prints false otherwise // this output should be false as x IS &gt; 3 AND y IS &gt; 2 } } DeMorgansOrTest.main(null) . false . Resources . https://www.w3schools.com/java/java_conditions.asp | https://www.javatpoint.com/java-if-else | https://www.programiz.com/java-programming/if-else-statement | https://docs.oracle.com/javase/tutorial/java/nutsandbolts/if.html | https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html | https://www.w3schools.com/java/java_switch.asp | .",
            "url": "https://kar722.github.io/fastpages/2022/09/09/Java-Week-3-Notebook.html",
            "relUrl": "/2022/09/09/Java-Week-3-Notebook.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Java Objects Notebook",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers import java.io.*; // library for input output classes import java.io.File; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes public static final String ANSI_RESET = &quot; u001B[0m&quot;; public static final String ANSI_BLACK = &quot; u001B[30m&quot;; public static final String ANSI_RED = &quot; u001B[31m&quot;; public static final String ANSI_GREEN = &quot; u001B[32m&quot;; public static final String ANSI_YELLOW = &quot; u001B[33m&quot;; public static final String ANSI_BLUE = &quot; u001B[34m&quot;; public static final String ANSI_PURPLE = &quot; u001B[35m&quot;; public static final String ANSI_CYAN = &quot; u001B[36m&quot;; public static final String ANSI_WHITE = &quot; u001B[37m&quot;; // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Math&quot;); System.out.println(&quot;2 - Physics&quot;); System.out.println(&quot;3 - English&quot;); System.out.println(&quot;4 - Karthik &gt; Evan in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) throws Exception { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Cya!&quot;); quit = true; break; case 1: System.out.println(&quot;Math Calculator: &quot;); // stores two numbers double num1, num2; // Take input from the user Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter the first number: &quot;); // take the inputs num1 = scanner.nextDouble(); System.out.println(num1); System.out.print(&quot;Enter the operator (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;Enter second number: &quot;); num2 = scanner.nextDouble(); System.out.println(num2); double output = 0; switch (operator) { // case to add two numbers case &#39;+&#39;: output = num1 + num2; break; // case to subtract two numbers case &#39;-&#39;: output = num1 - num2; break; // case to multiply two numbers case &#39;*&#39;: output = num1 * num2; break; // case to divide two numbers case &#39;/&#39;: output = num1 / num2; break; default: System.out.println(&quot;Invalid input&quot;); break; } System.out.println(&quot;The final result: &quot;); // print the final result System.out.println(num1 + &quot; &quot; + operator + &quot; &quot; + num2 + &quot; = &quot; + output); System.out.println(); System.out.println(ANSI_RED + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 2: System.out.println(&quot;Physics (F = m*a) Calculator&quot;); // force calcultor // initialize scanner input Scanner input; // initialize integers to be used for the input and to be displayed at the very end double force = 0.0; double mass = 0.0; double acceleration = 0.0; // initialize strings to be used for the input and to be displayed at the very end String finalString; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter force(kg): &quot;); try { mass = input.nextDouble(); System.out.println(mass); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter acceleration(m/s²): &quot;); try { acceleration = input.nextDouble(); System.out.println(acceleration); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // math operation for finding force = mass x acceleration force = mass * acceleration; // final formatted string with both variables finalString = &quot;force(N) = &quot; + force; System.out.println(finalString); System.out.println(); System.out.println(ANSI_YELLOW + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 3: System.out.print(&quot;English Spell Checker...&quot;); Scanner write = new Scanner(System.in); System.out.println(&quot;Enter a sentence and the program will check if you made any spelling mistakes or if the word is not in the dictionary: &quot;); String sentence = write.nextLine(); System.out.println(sentence); String[] splitSentence = sentence.split(&quot; &quot;); for(int i = 0; i &lt; splitSentence.length; i++) { Scanner read = new Scanner(new File(&quot;dictionary.txt&quot;)); boolean found = false; while(read.hasNextLine()) { String compare = read.nextLine(); if(compare.equalsIgnoreCase(splitSentence[i])) { System.out.println(splitSentence[i] + &quot; : correct&quot;); found=true; break; } } if(!found) System.out.println(splitSentence[i] + &quot; : incorrect&quot;); } System.out.println(); System.out.println(ANSI_BLUE + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 4: for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot; Karthik &gt; Evan &quot;); } System.out.println(); System.out.println(); System.out.println(ANSI_WHITE + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Math 2 - Physics 3 - English 4 - Karthik &gt; Evan in color 0 - Quit - 1: Math Calculator: Enter the first number: 76.1 Enter the operator (+,-,*,/): * Enter second number: 54.1 The final result: 76.1 * 54.1 = 4117.01 Enter Another option from the menu: 2: Physics (F = m*a) Calculator Enter force(kg): 760.22 Enter acceleration(m/s²): 134.0 force(N) = 101869.48000000001 Enter Another option from the menu: 3: English Spell Checker...Enter a sentence and the program will check if you made any spelling mistakes or if the word is not in the dictionary: hey mr mort i dont like making spellung mistakes hey : correct mr : correct mort : correct i : correct dont : incorrect like : correct making : correct spellung : incorrect mistakes : correct Enter Another option from the menu: 4: Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Enter Another option from the menu: 0: Cya! .",
            "url": "https://kar722.github.io/fastpages/2022/09/04/Java-Objects-Juypter-Notebook.html",
            "relUrl": "/2022/09/04/Java-Objects-Juypter-Notebook.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Week 2 Innovation - Using Objects",
            "content": "Hacks . Issue . Part 1 Fastpages . Java Objects Notebook | . Code.org Learning (1-15 Done) . Key Learnings w/ Code Snippets | . .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/09/02/Innovation-Using-Objects.html",
            "relUrl": "/markdown/2022/09/02/Innovation-Using-Objects.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Week 1 Innovation - Primitives",
            "content": "Hacks . Issue . Part 1 Fastpages . Bash Notebook | Java Primitives Notebook | . Code.org Learning . Capture information that will grow to 10 CB Units . Watch main daily videos on CollegeBoard capture key code segments into jupyter notebooks organized by units | . | Practice AP Frqs and MCs all throughout the year but more and more as we get closer to the AP test date | CollegeBoard work is more essential for AP test and PBLs can help with AP test if CollegeBoard key concepts are used | . As AP Test date gets closer I will: . Assess my strengths and weakness focuses on making my weaknesses my strengths by reviewing old material as well as finding new material | . | Practice MC questions | Practice FRQs | Take full practice tests | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/08/28/Primitives.html",
            "relUrl": "/markdown/2022/08/28/Primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Java Primitives Notebook",
            "content": "import java.util.Scanner; public class ppg { public static void main(String[] args) { // NBA PPG calculator // initialize scanner input Scanner input; // initialize integers to be used for the input and to be displayed at the very end int totalPoints = 0; int gamesPlayed = 0; double ppg = 0.0; // initialize strings to be used for the input and to be displayed at the very end String player = null; String season = null; String finalString; // input for the players name // primitive string input = new Scanner(System.in); System.out.print(&quot;Enter player name: &quot;); try { player = input.nextLine(); System.out.println(player); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); // input for the season date // primitive string input = new Scanner(System.in); System.out.print(&quot;Which NBA season? (Ex: 2021/22): &quot;); try { season = input.nextLine(); System.out.println(season); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); // input total points scored during that season // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter total points: &quot;); try { totalPoints = input.nextInt(); System.out.println(totalPoints); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // input total games played during that season // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter games played: &quot;); try { gamesPlayed = input.nextInt(); System.out.println(gamesPlayed); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // math operation for finding average points scored per game during that season ppg = totalPoints / gamesPlayed; // final formatted string with both variables finalString = player + &quot; averaged &quot; + ppg + &quot; points per game (ppg) during the &quot; + season + &quot; NBA season&quot;; System.out.println(finalString); } } // running the class ppg.main(null); . Enter player name: Anthony Davis Which NBA season? (Ex: 2021/22): 2019/20 Enter total points: 1618 Enter games played: 62 Anthony Davis averaged 26.0 points per game (ppg) during the 2019/20 NBA season .",
            "url": "https://kar722.github.io/fastpages/2022/08/28/Java-Primitives-Jupyter-Notebook.html",
            "relUrl": "/2022/08/28/Java-Primitives-Jupyter-Notebook.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "TT 1.0.0 Tools and Equipment",
            "content": "Hacks . Issue . Part 1 Fastpages . Python Jupyter Notebook | Java Jupyter Notebook | | Github Insights for FastPages | Github Insights for CSA Project | . Part 2 Java Project . . Spring Portfolio Commit | . Issue .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/08/21/Tools-and-Equipment.html",
            "relUrl": "/markdown/2022/08/21/Tools-and-Equipment.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Python Jupyter Notebook",
            "content": "Python &quot;hello world&quot; via Jupyter Notebook . Hello I&#39;m Karthik . print(&quot;hello world&quot;) . hello world .",
            "url": "https://kar722.github.io/fastpages/2022/08/21/Python-Jupyter-Notebook.html",
            "relUrl": "/2022/08/21/Python-Jupyter-Notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Java Notebook",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! .",
            "url": "https://kar722.github.io/fastpages/2022/08/21/Java-Jupyter-Notebook.html",
            "relUrl": "/2022/08/21/Java-Jupyter-Notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Week 2 Code.org 6-15",
            "content": "Lesson 6 . Inheritance in Java is a concept that acquires the properties from one class to other classes. Classes can be derived from classes in Java. The derived class (the class that is derived from another class) is called a subclass. The class from which its derived is called the superclass. . Lesson 10 . In this example, the extend keywords indicates that the PainterPlus class inherits or acquires all the properties of the Painter class. All of the public void variables created in the PainterPlus.java file can be used in the main MyNeighborhood.java file because it is extended. . PainterPlus.java . . MyNeighborhood.java . . Lesson 14 . PainterPlus.java . PainterPlus extends everything from the Painter parent class. . PatternPainter.java . PatternPainter extendes everyhing from the PainterPlus class so it extends from the Painter class as well. . BackgroundPainter.java . BackgroundPainter extendes everyhing from the PatternPainter class so it extends from the and PainterPlus and Painter class as well. .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/08/21/Code.org-learnings.html",
            "relUrl": "/markdown/2022/08/21/Code.org-learnings.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kar722.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kar722.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kar722.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}