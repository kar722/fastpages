{
  
    
        "post0": {
            "title": "Unit 2 Grading",
            "content": "Unit 2 Homework Grades . Groups Grade MCQ FRQ Notes . 1 | .95 | 1/1 | .9/1 | Completed everything as standard yet better than everyone elses | . 2 | 1 | 1/1 | 1/1 | Way over the top, had clear knowledge and mastery of said topic | . 3 (Ours) | - | - | - | - | . 4 | 1/1 | 1/1 | 1/1 | Understanding is clear, extensive knowledge of objects | . 5 | .9 | 1/1 | .9/1 | Couple of links don’t work | . 6 | .95 | 1/1 | .9/1 | Standard Answers yet a seemlingly perfect blog | . 7 | 1/1 | 1/1 | 1+/1 | looks very clean, and is clear that time was put into understanding | . 8 | .95 | 1/1 | .9/1 | Great Organization, FRQ Answer is basic | . 9 | .95 | 1/1 | 1/1 | Unorganized, Amazing Work | . 10 | .9/1 | 1/1 | .8/1 | FRQ lacked effort, 6/7 on MCQ | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/11/29/Grading.html",
            "relUrl": "/markdown/2022/11/29/Grading.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Bash Week 1 Notebook",
            "content": "ls . 2020-02-20-test.ipynb* 2022-21-08-Java-Jupyter-Notebook.ipynb* 2022-21-08-Python-Jupyter-Notebook.ipynb* 2022-28-08-Bash-Jupyter-Notebook.ipynb* 2022-28-08-Java-Primitives-Jupyter-Notebook.ipynb* README.md* ghtop_images/ my_icons/ . !python --version . Python 3.9.12 . !python2 --version . Python 2.7.18 . !java --version . openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) . !javac --version . javac 11.0.16 . !conda --version . conda 4.14.0 . conda list | grep &quot;jupyter&quot; . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 Note: you may need to restart the kernel to use updated packages. . !juypter --version . /bin/bash: juypter: command not found . !jupyter kernelspec list . Available kernels: java /home/kar/.local/share/jupyter/kernels/java javascript /home/kar/.local/share/jupyter/kernels/javascript python3 /home/kar/.local/share/jupyter/kernels/python3 . !npm -version . 3.10.10 .",
            "url": "https://kar722.github.io/fastpages/2022/11/29/Bash-Jupyter-Notebook.html",
            "relUrl": "/2022/11/29/Bash-Jupyter-Notebook.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Night @ The Musuem",
            "content": "Photos . . Final Project Trimester 1 . Backend . Backend Repo | Backend Website | Votes API | Trivia API | Self Made Predictions API | | . Frontend . Frontend Repo | Index.html | Quiz.html | Votes.html | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/11/08/N@TM.html",
            "relUrl": "/markdown/2022/11/08/N@TM.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Finals Week Test Corrections",
            "content": "Question 11 . . I got this wrong because I didn’t realize that this will prevent an ArrayIndexOutOfBoundsException from being thrown if target does not appear in data, however if target is at element 0, -1 will be returned instead of 0 as intended. | Answer B is correct because the seqSearchRecHelper recursive method does not work as intended when target does not appear in data. In this case, when last becomes -1, the method will throw an ArrayIndexOutOfBoundsException in the first if statement after line 1. To prevent this, we should add a check to see if last is less than 0 and if it is, return -1 as expected. | I can watch 10.1 Daily Videos #1 and #2 to learn these skills. | . Question 12 . . I got this wrong because I was not sure if this would be the return value if k started at 0. | Answer C is correct because the value of the loop control variable k starts at 1 and is incremented by 2 as long as it is less than input.length. In this case, input is assigned “computer”, so input.length is 8. The values of k are 1, 3, 5, 7, and then when k is 9, the loop terminates. The statement input.substring (k, k + 1) will return the value of input at index k. The values that are added to output in order are “o”, “p”, “t”, and “r”. The value “optr” is returned. | Resources : 2.7: Daily Video 1 (Skill 2.C), 2.7: Daily Video 2 (Skill 3.A), 2.7: Daily Video 3, 4.3: Daily Video 1 (Skill 2.C), 4.3: Daily Video 2 (Skill 3.C), 4.3: Daily Video 3 (Skill 3.C) | . Question 19 . . This was an accidental error not from lack of knowledge but just cause I thought it was super easy. | Answer B is correct because De Morgan’s Law states that !(p &amp;&amp; q) is equivalent to !p |   | !q. By applying De Morgan’s Law to this expression, we negate the first expression !(!(a !=b)) and the second expression !(b &gt;7) to form !(!(a != b)) |   | !(b &gt; 7). In the first expression the two consecutive not operators (!) cancel each other out giving us (a != b). In the second expression, the opposite of &gt; is &lt;= giving us (b &lt;= 7). The equivalent expression is (a != b) |   | (b &lt;= 7). | . | Resources: 3.6: Daily Video 1, 3.6: Daily Video 2 | . Question 22 . . This question had a lot of code to follow along with and I got lost in the middle. I didn’t understand that objects of subclasses can be assigned to variables of the type of superclass. In this case, the array elements are of type Book and can be assigned objects of type Book or any subclass of Book. | Answer B is correct since the books array has been declared of type Book, at compile time all objects stored in books are considered Book object regardless of their actual type. Therefore, any methods that are called on elements of books must be declared in Book. In order to call the pagesPerMinute() method on Book[0], we would need to use typecasting to let the compiler know that the object stored in the books array at this index is actually an AudioBook object. | Resources: 9.6 Daily Videos #1, #2, #3 | . Question 24 . . I got this wrong as I did not realize that the row and column indices for 2D arrays start at 0. The value 8 is at newArray[1][2]. | Answer D is correct as the enhanced for loop iterates over the array oldArray. In the first iteration, newArray[0][0] is assigned the value 1. The value of row is incremented to 1. Since 1 % 3 does not equal 0, the statements in the if are not executed. In the next iteration, newArray[1][0] is assigned the value 2. The value of row is incremented to 2. The algorithm continues to fill column 0 with the subsequent values of oldArray. Once row is 3, the if condition is true and row is assigned 0 and col is incremented to 1. The algorithm proceeds to fill column 1. When the for loop terminates, newArray contains the following values { {1, 4, 7}, {2, 5, 8}, {3, 6, 9} }. The value of newArray[0][2] is 7. | Resources: 8.1: Daily Video 1 (Skill 3.E), 8.1: Daily Video 2 (Skill 3.E), 8.1: Daily Video 3 (Skill 1.B) | . Question 29 . . I got this wrong as I did not understand that this will print the values 1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, and 97. This will output the same number of values but the values will not be the same. | Answer E is correct as the original code segment prints all values between 1 and 100 that are evenly divisible by 4. The following values are printed: 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, and 100. Choice E shows these values can also be printed by having a for loop that has a loop control variable k that starts at 4, increments by 4, and terminates when k is greater than 100. | Resources: 4.2: Daily Video 1 (Skill 5.C), 4.2: Daily Video 2 (Skill 4.C), 4.2: Daily Video 3 (Skill 3.C) | . Question 32 . . I got this wrong as I did not realize that this would be correct if answer was initialized to 0 and during each iteration of the loop, n was added to answer. | Answer C is correct when you consider the example when n is assigned the value 2 and k is assigned the value 3. The for loop has a loop control variable i that starts at 1, increments by 1 and terminates when i is k + 1. Therefore, the loop iterates k times. During each iteration of the loop, answer, which was initialized to 1, is multiplied by n. In our example, that means answer is multiplied by 2, three times. Or answer is assigned 1 * 2 * 2 * 2, which is equivalent to 2 raised to the power 3. | Resources: 4.2: Daily Video 1 (Skill 5.C), 4.2: Daily Video 2 (Skill 4.C), 4.2: Daily Video 3 (Skill 3.C) | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/11/07/Test-Corrections.html",
            "relUrl": "/markdown/2022/11/07/Test-Corrections.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 7 2018 HW",
            "content": "2. This question involves reasoning about pairs of words that are represented by the following . public class WordPair . { . /* Constructs a WordPair object. / . public WordPair(String first, String second) . { / implementation not shown / } . /* Returns the first string of this WordPair object. / . public String getFirst() . { / implementation not shown / } . /* Returns the second string of this WordPair object. / . public String getSecond() . { / implementation not shown / } . } . WordPair class. . 2. You will implement the constructor and another method for the following WordPairList class. . public class WordPairList . { . /* The list of word pairs, initialized by the constructor. / . private ArrayList allPairs;&lt;/p&gt; /** Constructs a WordPairList object as described in part (a). . Precondition: words.length &gt;= 2 . */ . public WordPairList(String[] words) . { / to be implemented in part (a) / } . /** Returns the number of matches as described in part (b). . */ . public int numMatches() . { / to be implemented in part (b) / } . } . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; (a) Write the constructor for the WordPairList class. The constructor takes an array of strings words as . a parameter and initializes the instance variable allPairs to an ArrayList of WordPair objects. A WordPair object consists of a word from the array paired with a word that appears later in the array. The allPairs list contains WordPair objects (words[i], words[j]) for every i and j, where 0 £ i &lt; j &lt; words.length . Each WordPair object is added exactly once to the list. The following examples illustrate two different WordPairList objects. . . Complete the WordPairList constructor below. . /** Constructs a WordPairList object as described in part (a). . Precondition: words.length &gt;= 2 */ public WordPairList(String[] words) | . public class WordPairList { public WordPairList(String[] words) { allPairs = new ArrayList&lt;WordPair&gt;(); for(int i = 0; i &lt; words.length; i++) for(int j = i + 1; j &lt; words.length; j++) allPairs.add(new WordPair(words[i], words[j])); } } . (2b) . Write the WordPairList method numMatches. This method returns the number of WordPair objects in allPairs for which the two strings match. For example, the following code segment creates a WordPairList object. . String[] moreWords = {&quot;the&quot;, &quot;red&quot;, &quot;fox&quot;, &quot;the&quot;, &quot;red&quot;}; . WordPairList exampleThree = new WordPairList(moreWords); . After the code segment has executed, the allPairs instance variable of exampleThree will contain the following WordPair objects in some order. The pairs in which the first string matches the second string are shaded for illustration. . (&quot;the&quot;, &quot;red&quot;), (&quot;the&quot;, &quot;fox&quot;), (&quot;the&quot;, &quot;the&quot;), . (&quot;the&quot;, &quot;red&quot;), (&quot;red&quot;, &quot;fox&quot;), (&quot;red&quot;, &quot;the&quot;), . (&quot;red&quot;, &quot;red&quot;), (&quot;fox&quot;, &quot;the&quot;), (&quot;fox&quot;, &quot;red&quot;), . (&quot;the&quot;, &quot;red&quot;) . The call exampleThree.numMatches() should return 2. . . Complete method numMatches below. . /** Returns the number of matches as described in part (b). . */ . public int numMatches() . public int numMatches() { int matches = 0; for(WordPair wp : allPairs) if(wp.getFirst().equals(wp.getSecond())) matches++; return matches; } . &lt;/div&gt; .",
            "url": "https://kar722.github.io/fastpages/homework/2022/10/27/Unit-7-HW.html",
            "relUrl": "/homework/2022/10/27/Unit-7-HW.html",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 6 Homework",
            "content": "Hack 1 . How do we access the even numbers in arrayOne from above? . import java.util.Arrays; int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i&lt;arrayOne.length;i++) { if (arrayOne[i] % 2 == 0) { System.out.println(arrayOne[i] + &quot; &quot;); } } . Hack 2 . Which of the following is FALSE about arrays . A. A java array is an object | B. Length of array can be changed after creation of array | C. Numerical data types of arrays are initialized to 0 to start | . B . APCSA 2021 Question 3 . A high school club maintains information about its members in a MemberInfo object. A MemberInfo object stores a club member’s name, year of graduation, and whether or not the club member is in good standing. A member who is in good standing has fulfilled all the responsibilities of club membership. . A partial declaration of the MemberInfo class is shown below. . public class MemberInfo { / Constructs a MemberInfo object for the club member with name name, graduation year gradYear, and standing hasGoodStanding. / public MemberInfo(String name, int gradYear, boolean hasGoodStanding) { / implementation not shown */ } / Returns the graduation year of the club member. / public int getGradYear() { / implementation not shown / } /** Returns true if the member is in good standing and false otherwise. / public boolean inGoodStanding() { / implementation not shown / } // There may be instance variables, constructors, and methods that are not shown. } | . | The ClubMembers class maintains a list of current club members. The declaration of the ClubMembers class is shown below. . public class ClubMembers { private ArrayList memberList; / Adds new club members to memberList, as described in part (a). Precondition: names is a non-empty array. / public void addMembers(String[] names, int gradYear) { / to be implemented in part (a) */ } / Removes members who have graduated and returns a list of members who have graduated and are in good standing, as described in part (b). / public ArrayList removeMembers(int year) { /&lt;/em&gt; to be implemented in part (b) */ } // There may be instance variables, constructors, and methods that are not shown. } &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; (A) . Write the ClubMembers method addMembers, which takes two parameters. The first parameter is a String array containing the names of new club members to be added. The second parameter is the graduation year of all the new club members. The method adds the new members to the memberList instance variable. The names can be added in any order. All members added are initially in good standing and share the same graduation year, gradYear. . Complete the addMembers method. . /* Adds new club members to memberList, as described in part (a). Precondition: names is a non-empty array./ . public void addMembers(String[] names, int gradYear) . public void addMembers(String[] names, int gradYear) { for (String n : names) { MemberInfo newM = new MemberInfo (n, gradYear, true); memberList.add(newM); } } . &lt;/div&gt; | . | .",
            "url": "https://kar722.github.io/fastpages/homework/2022/10/25/Unit-6-HW.html",
            "relUrl": "/homework/2022/10/25/Unit-6-HW.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 5 2019 FRQ Q2",
            "content": "2. . This question involves the implementation of a fitness tracking system that is represented by the StepTracker class. A StepTracker object is created with a parameter that defines the minimum number of steps that must be taken for a day to be considered active. The StepTracker class provides a constructor and the following methods. . addDailySteps, which accumulates information about steps, in readings taken once per day | activeDays, which returns the number of active days | averageSteps, which returns the average number of steps per day, calculated by dividing the total number of steps taken by the number of days tracked | . The following table contains a sample code execution sequence and the corresponding results. . . Write the complete StepTracker class, including the constructor and any required instance variables and methods. Your implementation must meet all specifications and conform to the example. . public class StepTracker { private final int minStepsActive; private int activeDays; private int days; private int totalSteps; public StepTracker(int minStepsActive) { this.minStepsActive = minStepsActive; activeDays = 0; days = 0; totalSteps = 0; } public void addDailySteps(int steps) { if(steps &gt;= minStepsActive) activeDays++; days++; totalSteps += steps; } public int activeDays() { return activeDays; } public double averageSteps() { if(days == 0) return 0; return totalSteps / (double) days; } } .",
            "url": "https://kar722.github.io/fastpages/homework/2022/10/25/Unit-5-FRQ.html",
            "relUrl": "/homework/2022/10/25/Unit-5-FRQ.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 4 Homework",
            "content": "// import required classes and package, if any import java.util.Scanner; // create class CaesarCipherExample for encryption and decryption public class CaesarCipherExample { // ALPHABET string denotes alphabet from a-z public static final String ALPHABET = &quot;abcdefghijklmnopqrstuvwxyz&quot;; // create encryptData() method for encrypting user input string with given shift key public static String encryptData(String inputStr, int shiftKey) { // convert inputStr into lower case inputStr = inputStr.toLowerCase(); // encryptStr to store encrypted data String encryptStr = &quot;&quot;; // use for loop for traversing each character of the input string for (int i = 0; i &lt; inputStr.length(); i++) { // get position of each character of inputStr in ALPHABET int pos = ALPHABET.indexOf(inputStr.charAt(i)); // get encrypted char for each char of inputStr int encryptPos = (shiftKey + pos) % 26; char encryptChar = ALPHABET.charAt(encryptPos); // add encrypted char to encrypted string encryptStr += encryptChar; } // return encrypted string return encryptStr; } // create decryptData() method for decrypting user input string with given shift key public static String decryptData(String inputStr, int shiftKey) { // convert inputStr into lower case inputStr = inputStr.toLowerCase(); // decryptStr to store decrypted data String decryptStr = &quot;&quot;; // use for loop for traversing each character of the input string for (int i = 0; i &lt; inputStr.length(); i++) { // get position of each character of inputStr in ALPHABET int pos = ALPHABET.indexOf(inputStr.charAt(i)); // get decrypted char for each char of inputStr int decryptPos = (pos - shiftKey) % 26; // if decryptPos is negative if (decryptPos &lt; 0){ decryptPos = ALPHABET.length() + decryptPos; } char decryptChar = ALPHABET.charAt(decryptPos); // add decrypted char to decrypted string decryptStr += decryptChar; } // return decrypted string return decryptStr; } // main() method start public static void main(String[] args) { // create an instance of Scanner class Scanner sc = new Scanner(System.in); // take input from the user System.out.println(&quot;Enter a string for encryption using Caesar Cipher: &quot;); String inputStr = sc.nextLine(); System.out.println(&quot;Enter the value by which each character in the plaintext message gets shifted: &quot;); int shiftKey = Integer.valueOf(sc.nextLine()); System.out.println(&quot;Encrypted Data ===&gt; &quot;+encryptData(inputStr, shiftKey)); System.out.println(&quot;Decrypted Data ===&gt; &quot;+decryptData(encryptData(inputStr, shiftKey), shiftKey)); // close Scanner class object sc.close(); } } CaesarCipherExample.main(null) . Enter a string for encryption using Caesar Cipher: Enter the value by which each character in the plaintext message gets shifted: Encrypted Data ===&gt; nicecjobcccodeccodeccodecsupercalifragilisticexpialidocious Decrypted Data ===&gt; kfzbzglyzzzlabzzlabzzlabzprmbozxifcoxdfifpqfzbumfxifalzflrp .",
            "url": "https://kar722.github.io/fastpages/homework/2022/10/25/Unit-4-JavaExercises_copy.html",
            "relUrl": "/homework/2022/10/25/Unit-4-JavaExercises_copy.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 3 Java-Exercises",
            "content": "1. Write a Java program to get a number from the user and print whether it is positive or negative. . import java.util.Scanner; public class Exercise1 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input number: &quot;); int input = in.nextInt(); if (input &gt; 0) { System.out.println(&quot;Number is positive&quot;); } else if (input &lt; 0) { System.out.println(&quot;Number is negative&quot;); } else { System.out.println(&quot;Number is zero&quot;); } } } Exercise1.main(null); . Input number: Number is positive . 2. Write a Java program to solve quadratic equations (use if, else if and else). . import java.util.Scanner; public class Exercise2 { public static void main(String[] Strings) { Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } Exercise2.main(null); . Input a: Input b: Input c: The equation has no real roots. . 3. Take three numbers from the user and print the greatest number. . import java.util.Scanner; public class Exercise3 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input the 1st number: &quot;); int num1 = in.nextInt(); System.out.print(&quot;Input the 2nd number: &quot;); int num2 = in.nextInt(); System.out.print(&quot;Input the 3rd number: &quot;); int num3 = in.nextInt(); if (num1 &gt; num2) if (num1 &gt; num3) System.out.println(&quot;The greatest: &quot; + num1); if (num2 &gt; num1) if (num2 &gt; num3) System.out.println(&quot;The greatest: &quot; + num2); if (num3 &gt; num1) if (num3 &gt; num2) System.out.println(&quot;The greatest: &quot; + num3); } } Exercise3.main(null); . Input the 1st number: Input the 2nd number: Input the 3rd number: The greatest: 9 . 4.Write a Java program that reads a floating-point number and prints &quot;zero&quot; if the number is zero. Otherwise, print &quot;positive&quot; or &quot;negative&quot;. Add &quot;small&quot; if the absolute value of the number is less than 1, or &quot;large&quot; if it exceeds 1,000,000. . import java.util.Scanner; public class Exercise4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input value: &quot;); double input = in.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } Exercise4.main(null); . Input value: Positive number . 5. Write a Java program that keeps a number from the user and generates an integer between 1 and 7 and displays the name of the weekday. . import java.util.Scanner; public class Exercise5 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input number: &quot;); int day = in.nextInt(); System.out.println(getDayName(day)); } // Get the name for the Week public static String getDayName(int day) { String dayName = &quot;&quot;; switch (day) { case 1: dayName = &quot;Monday&quot;; break; case 2: dayName = &quot;Tuesday&quot;; break; case 3: dayName = &quot;Wednesday&quot;; break; case 4: dayName = &quot;Thursday&quot;; break; case 5: dayName = &quot;Friday&quot;; break; case 6: dayName = &quot;Saturday&quot;; break; case 7: dayName = &quot;Sunday&quot;; break; default:dayName = &quot;Invalid day range&quot;; } return dayName; } } Exercise5.main(null); . Input number: Wednesday . 6. Write a Java program that reads in two floating-point numbers and tests whether they are the same up to three decimal places. . import java.util.Scanner; public class Exercise6 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Exercise6.main(null); . Input floating-point number: Input floating-point another number: They are different . 7. Write a Java program to find the number of days in a month. . import java.util.Scanner; public class Exercise7 { public static void main(String[] strings) { Scanner input = new Scanner(System.in); int number_Of_DaysInMonth = 0; String MonthOfName = &quot;Unknown&quot;; System.out.print(&quot;Input a month number: &quot;); int month = input.nextInt(); System.out.print(&quot;Input a year: &quot;); int year = input.nextInt(); switch (month) { case 1: MonthOfName = &quot;January&quot;; number_Of_DaysInMonth = 31; break; case 2: MonthOfName = &quot;February&quot;; if ((year % 400 == 0) || ((year % 4 == 0) &amp;&amp; (year % 100 != 0))) { number_Of_DaysInMonth = 29; } else { number_Of_DaysInMonth = 28; } break; case 3: MonthOfName = &quot;March&quot;; number_Of_DaysInMonth = 31; break; case 4: MonthOfName = &quot;April&quot;; number_Of_DaysInMonth = 30; break; case 5: MonthOfName = &quot;May&quot;; number_Of_DaysInMonth = 31; break; case 6: MonthOfName = &quot;June&quot;; number_Of_DaysInMonth = 30; break; case 7: MonthOfName = &quot;July&quot;; number_Of_DaysInMonth = 31; break; case 8: MonthOfName = &quot;August&quot;; number_Of_DaysInMonth = 31; break; case 9: MonthOfName = &quot;September&quot;; number_Of_DaysInMonth = 30; break; case 10: MonthOfName = &quot;October&quot;; number_Of_DaysInMonth = 31; break; case 11: MonthOfName = &quot;November&quot;; number_Of_DaysInMonth = 30; break; case 12: MonthOfName = &quot;December&quot;; number_Of_DaysInMonth = 31; } System.out.print(MonthOfName + &quot; &quot; + year + &quot; has &quot; + number_Of_DaysInMonth + &quot; days n&quot;); } } Exercise7.main(null); . Input a month number: Input a year: February 2019 has 28 days . 8. Write a Java program that takes the user to provide a single character from the alphabet. Print Vowel or Consonant, depending on the user input. If the user input is not a letter (between a and z or A and Z), or is a string of length &gt; 1, print an error message. . import java.util.Scanner; public class Exercise8 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = in.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } } } Exercise8.main(null); . Input an alphabet: Error. Not a letter. Enter uppercase or lowercase letter. . 9. Write a Java program that takes a year from user and print whether that year is a leap year or not. . import java.util.Scanner; public class Exercise9 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input the year: &quot;); int year = in.nextInt(); boolean x = (year % 4) == 0; boolean y = (year % 100) != 0; boolean z = ((year % 100 == 0) &amp;&amp; (year % 400 == 0)); if (x &amp;&amp; (y || z)) { System.out.println(year + &quot; is a leap year&quot;); } else { System.out.println(year + &quot; is not a leap year&quot;); } } } Exercise9.main(null); . Input the year: 42 is not a leap year . 10. Write a program in Java to display the first 10 natural numbers. . public class Exercise10 { public static void main(String[] args) { int i; System.out.println (&quot;The first 10 natural numbers are: n&quot;); for (i=1;i&lt;=10;i++) { System.out.println (i); } System.out.println (&quot; n&quot;); } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . 11. Write a program in Java to display n terms of natural numbers and their sum. . import java.util.Scanner; public class Exercise11 { public static void main(String[] args) { int i, n, sum=0; { Scanner in = new Scanner(System.in); System.out.print(&quot;Input number: &quot;); n = in.nextInt(); } System.out.println(&quot;The first n natural numbers are : &quot;+n); for(i=1;i&lt;=n;i++) { System.out.println(i); sum+=i; } System.out.println(&quot;The Sum of Natural Number upto &quot;+n+ &quot; terms : &quot; +sum); } } Exercise11.main(null); . Input number: The first n natural numbers are : 48 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 The Sum of Natural Number upto 48 terms : 1176 . 12. Write a program in Java to input 5 numbers from keyboard and find their sum and average . import java.util.Scanner; public class Exercise12 { public static void main(String[] args) { int i,n=0,s=0; double avg; { System.out.println(&quot;Input the 5 numbers : &quot;); } for (i=0;i&lt;5;i++) { Scanner in = new Scanner(System.in); n = in.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of 5 no is : &quot; +s+&quot; nThe Average is : &quot; +avg); } } Exercise12.main(null); . Input the 5 numbers : The sum of 5 no is : 26 The Average is : 5.0 . 13. Write a program in Java to display the cube of the number upto given an integer. . import java.util.Scanner; public class Exercise13 { public static void main(String[] args) { int i,n; System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { System.out.println(&quot;Number is : &quot; +i+&quot; and cube of &quot; +i+&quot; is : &quot;+(i*i*i)); } } } Exercise13.main(null); . Input number of terms : Number is : 1 and cube of 1 is : 1 Number is : 2 and cube of 2 is : 8 Number is : 3 and cube of 3 is : 27 Number is : 4 and cube of 4 is : 64 . 14. Write a program in Java to display the multiplication table of a given integer. . import java.util.Scanner; public class Exercise14 { public static void main(String[] args) { int j,n; System.out.print(&quot;Input the number(Table to be calculated): &quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; n&quot;); for(j=0;j&lt;=n;j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } } } Exercise14.main(null); . Input the number(Table to be calculated): Input number of terms : 5 X 0 = 0 5 X 1 = 5 5 X 2 = 10 5 X 3 = 15 5 X 4 = 20 5 X 5 = 25 . 15. Write a program in Java to display the n terms of odd natural number and their sum. . import java.util.Scanner; public class Exercise15 { public static void main(String[] args) { int i,n,sum=0; System.out.print(&quot;Input number of terms is: &quot;); { Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; nThe odd numbers are :&quot;); for(i=1;i&lt;=n;i++) { System.out.println (2*i-1); sum+=2*i-1; } System.out.println (&quot;The Sum of odd Natural Number upto &quot; +n+&quot; terms is: &quot; +sum); } } } Exercise15.main(null); . Input number of terms is: The odd numbers are : 1 The Sum of odd Natural Number upto 1 terms is: 1 . 16. Write a program in Java to display the pattern like right angle triangle with a number. . import java.util.Scanner; public class Exercise16 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(j); System.out.println(&quot;&quot;); } } } Exercise16.main(null); . Input number of rows : 1 12 123 1234 12345 123456 1234567 12345678 123456789 12345678910 1234567891011 123456789101112 12345678910111213 1234567891011121314 123456789101112131415 12345678910111213141516 1234567891011121314151617 123456789101112131415161718 12345678910111213141516171819 . 17. Write a program in Java to make such a pattern like right angle triangle with a number which will repeat a number in a row.The pattern is as follows : . import java.util.Scanner; public class Exercise17 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of n : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(i); System.out.println(&quot;&quot;); } } } Exercise17.main(null); . Input number of n : 1 22 333 4444 55555 666666 7777777 88888888 . 18. Write a program in Java to make such a pattern like right angle triangle with number increased by 1.The pattern like : . import java.util.Scanner; public class Exercise18 { public static void main(String[] args) { int i,j,n,k=1; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(k++); System.out.println(&quot;&quot;); } } } Exercise18.main(null); . Input number of rows : 1 23 456 . 19. Write a program in Java to make such a pattern like a pyramid with a number which will repeat the number in the same row. . import java.util.Scanner; public class Exercise19 { public static void main(String[] args) { int i,j,n,s,x; System.out.print (&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); s=n+4-1; for(i=1;i&lt;=n;i++) { for(x=s;x!=0;x--) { System.out.print(&quot; &quot;); } for(j=1;j&lt;=i;j++) { System.out.print(i+&quot; &quot;); } System.out.println(); s--; } } } Exercise19.main(null); . Input number of rows : 1 2 2 3 3 3 4 4 4 4 . 20. Write a program in Java to print the Floyd&#39;s Triangle. . import java.util.Scanner; public class Main { public static void main(String[] args) { int numberOfRows; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); numberOfRows = in.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } } } Main.main(null); . Input number of rows : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 .",
            "url": "https://kar722.github.io/fastpages/homework/2022/10/25/Unit-3-JavaExercises.html",
            "relUrl": "/homework/2022/10/25/Unit-3-JavaExercises.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "APCSA 2019, Q1",
            "content": "1. The APCalendar class contains methods used to calculate information about a calendar. You will write two methods of the class. . public class APCalendar { / Returns true if year is a leap year and false otherwise. / private static boolean isLeapYear(int year) { / implementation not shown */ } / Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 / public static int numberOfLeapYears(int year1, int year2) { / to be implemented in part (a) */ } /** Returns the value representing the day of the week for the first day of year, | where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. / private static int firstDayOfYear(int year) { / implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. | Returns 1 for January 1 (month = 1, day = 1) of any year. | Precondition: The date represented by month, day, year is a valid date. / private static int dayOfYear(int month, int day, int year) { / implementation not shown */ } /** Returns the value representing the day of the week for the given date | (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition: The date represented by month, day, year is a valid date. / public static int dayOfWeek(int month, int day, int year) { / to be implemented in part (b) */ } // There may be instance variables, constructors, and other methods not shown. } | . 1(a) . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2 inclusive. In order to calculate this value, a helper method is provided for you. . isLeapYear(year) returns true if year is a leap year and false otherwise. | . Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. /** Returns the number of leap years between year1 and year2, inclusive. . Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2) | . public static int numberOfLeapYears(int year1, int year2) { int leapYears = 0; for(int y = year1; y &lt;= year2; y++) if(isLeapYear(y)) leapYears++; return leapYears; } . 1. . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. . As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. . In order to calculate this value, two helper methods are provided for you. . firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. | dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. | . Class information for this question . public class APCalendar | private static boolean isLeapYear(int year) | public static int numberOfLeapYears(int year1, int year2) | private static int firstDayOfYear(int year) | private static int dayOfYear(int month, int day, int year) | public static int dayOfWeek(int month, int day, int year) | . 1(b) . Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . /** Returns the value representing the day of the week for the given date . (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., | and 6 denotes Saturday. | Precondition: The date represented by month, day, year is a valid date. | . public static int dayOfWeek(int month, int day, int year) . public static int dayOfWeek(int month, int day, int year) { int weekday = firstDayOfYear(year); int additionalDays = dayOfYear(month, day, year) - 1; for(int d = 1; d &lt;= additionalDays; d++) { weekday++; if(weekday == 7) weekday = 0; } return weekday; } .",
            "url": "https://kar722.github.io/fastpages/homework/2022/10/25/Unit-3-2019FRQ.html",
            "relUrl": "/homework/2022/10/25/Unit-3-2019FRQ.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "ArrayList Java Notebook",
            "content": "add(int index, element) . This method is used to add an element at a particular index in the list. When a single parameter is passed, it simply adds the element at the end of the list. . import java.util.*; // create an empty array list with an initial capacity ArrayList&lt;String&gt; player_list = new ArrayList&lt;String&gt;(7); // use add() method to add values in the list player_list.add(&quot;Larry Bird&quot;); player_list.add(&quot;Stephen Curry&quot;); player_list.add(&quot;Shaquille O&#39;Neal&quot;); player_list.add(&quot;Klay Thompson&quot;); player_list.add(&quot;Karl Anthony Towns&quot;); // Insert Nocolor in 2nd and 4th position in the list player_list.add(1,&quot;Lonzo Ball&quot;); player_list.add(3,&quot;Giannis Antetokounmpo&quot;); // Print out the colors in the ArrayList for (int i = 0; i &lt; 7; i++) { System.out.println(player_list.get(i).toString()); } . Larry Bird Lonzo Ball Stephen Curry Giannis Antetokounmpo Shaquille O&#39;Neal Klay Thompson Karl Anthony Towns . addAll(int index, Collection collection) . This method is used to add all the elements in the given collection to the list. When a single parameter is passed, it adds all the elements of the given collection at the end of the list. . // create an empty array list with an initial capacity ArrayList&lt;String&gt; player_list1 = new ArrayList&lt;String&gt;(7); // use add() method to add values in the list player_list1.add(&quot;LeBron James&quot;); player_list1.add(&quot;Michael Jordan&quot;); player_list1.add(&quot;Magic Johnson&quot;); player_list1.add(&quot;Kareem Abdul-Jabbar&quot;); player_list1.add(&quot;Kevin Durant&quot;); // Insert Nocolor in 2nd and 4th position in the list player_list1.add(1,&quot;James Harden&quot;); player_list1.add(3,&quot;Anthony Davis&quot;); // Combines the two lists together inside of the player_list player_list.addAll(player_list1); for (int i = 0; i &lt; 14; i++) { System.out.println(player_list.get(i).toString()); } . Larry Bird Lonzo Ball Stephen Curry Giannis Antetokounmpo Shaquille O&#39;Neal Klay Thompson Karl Anthony Towns LeBron James James Harden Michael Jordan Anthony Davis Magic Johnson Kareem Abdul-Jabbar Kevin Durant . size() . This method is used to return the size of the list. . player_list.size(); . 14 . clear() . This method is used to remove all the elements in the list. However, the reference of the list created is still stored. . player_list.clear(); // list is empty now System.out.println(player_list); . [] . remove(int index) . This method removes an element from the specified index. It shifts subsequent elements(if any) to left and decreases their indexes by 1. . player_list.remove(7); // Removes &quot;LeBron James&quot; --&gt; the 7th index for (int i = 0; i &lt; 13; i++) { System.out.println(player_list.get(i).toString()); } . Larry Bird Lonzo Ball Stephen Curry Giannis Antetokounmpo Shaquille O&#39;Neal Klay Thompson Karl Anthony Towns James Harden Michael Jordan Anthony Davis Magic Johnson Kareem Abdul-Jabbar Kevin Durant . remove(element) . This method is used to remove the first occurrence of the given element in the list. . player_list.remove(&quot;Larry Bird&quot;); // Removes &quot;Larry Bird&quot; for (int i = 0; i &lt; 12; i++) { System.out.println(player_list.get(i).toString()); } . Lonzo Ball Stephen Curry Giannis Antetokounmpo Shaquille O&#39;Neal Klay Thompson Karl Anthony Towns James Harden Michael Jordan Anthony Davis Magic Johnson Kareem Abdul-Jabbar Kevin Durant . get(int index) . This method returns elements at the specified index. . player_list.get(9); . Magic Johnson . set(int index, element) . This method replaces elements at a given index with the new element. This function returns the element which was just replaced by a new element. . player_list.set(0, &quot;Kobe Bryant&quot;); for (int i = 0; i &lt; 12; i++) { System.out.println(player_list.get(i).toString()); } . Kobe Bryant Stephen Curry Giannis Antetokounmpo Shaquille O&#39;Neal Klay Thompson Karl Anthony Towns James Harden Michael Jordan Anthony Davis Magic Johnson Kareem Abdul-Jabbar Kevin Durant . indexOf(element) . This method returns the first occurrence of the given element or -1 if the element is not present in the list. . player_list.indexOf(&quot;Michael Jordan&quot;); . 7 . player_list.indexOf(&quot;Dwyane Wade&quot;); . -1 . lastIndexOf(element) . This method returns the last occurrence of the given element or -1 if the element is not present in the list. . player_list.indexOf(&quot;Anthony Davis&quot;); . 8 . player_list.indexOf(&quot;Blake Griffin&quot;); . -1 . equals(element) . This method is used to compare the equality of the given element with the elements of the list. . player_list.equals(&quot;LeBron James&quot;); . false . hashCode() . This method is used to return the hashcode value of the given list. . player_list.hashCode(); . -1679867756 . isEmpty() . This method is used to check if the list is empty or not. It returns true if the list is empty, else false. . ArrayList&lt;String&gt; karthik_list = new ArrayList&lt;String&gt;(7); karthik_list.isEmpty(); . true . player_list.isEmpty(); . false . contains(element) . This method is used to check if the list contains the given element or not. It returns true if the list contains the element. . player_list.contains(&quot;Karl Anthony Towns&quot;); . true . player_list.contains(&quot;Lonzo Ball&quot;); . false . containsAll(Collection collection) . This method is used to check if the list contains all the collection of elements. . player_list.containsAll(player_list1); . false . sort(Comparator comp) . This method is used to sort the elements of the list on the basis of the given comparator. . import java.util.Collections; // Sorts the string in alphabetical order Collections.sort(player_list); for (int i = 0; i &lt; 12; i++) { System.out.println(player_list.get(i).toString()); } . Anthony Davis Giannis Antetokounmpo James Harden Kareem Abdul-Jabbar Karl Anthony Towns Kevin Durant Klay Thompson Kobe Bryant Magic Johnson Michael Jordan Shaquille O&#39;Neal Stephen Curry .",
            "url": "https://kar722.github.io/fastpages/2022/10/09/Arraylist-Java-Jupyter-Notebook.html",
            "relUrl": "/2022/10/09/Arraylist-Java-Jupyter-Notebook.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Week 6 Project Approval",
            "content": "Hacks . Issue . Images and Arrays Color Scales . Java Notebook | . Java API . API | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/10/02/Week-6-Project-Approval.html",
            "relUrl": "/markdown/2022/10/02/Week-6-Project-Approval.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Java API",
            "content": "Rapid API . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://nfl-schedule.p.rapidapi.com/v1/schedules&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;9fb1283360mshedc514375b603d6p156a26jsna7cd4ca5744a&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;nfl-schedule.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;message&#34;:&#34;NFL Scheduled games&#34;,&#34;data&#34;:[{&#34;date&#34;:&#34;2022-10-03T00:20Z&#34;,&#34;venue&#34;:&#34;Raymond James Stadium&#34;,&#34;name&#34;:&#34;Kansas City Chiefs at Tampa Bay Buccaneers&#34;,&#34;shortName&#34;:&#34;KC @ TB&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Chiefs&#34;,&#34;score&#34;:&#34;7&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Buccaneers&#34;,&#34;score&#34;:&#34;3&#34;}},{&#34;date&#34;:&#34;2022-10-02T13:30Z&#34;,&#34;venue&#34;:&#34;Tottenham Hotspur Stadium&#34;,&#34;name&#34;:&#34;Minnesota Vikings at New Orleans Saints&#34;,&#34;shortName&#34;:&#34;MIN @ NO&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Vikings&#34;,&#34;score&#34;:&#34;28&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Saints&#34;,&#34;score&#34;:&#34;25&#34;}},{&#34;date&#34;:&#34;2022-10-02T17:00Z&#34;,&#34;venue&#34;:&#34;Mercedes-Benz Stadium&#34;,&#34;name&#34;:&#34;Cleveland Browns at Atlanta Falcons&#34;,&#34;shortName&#34;:&#34;CLE @ ATL&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Browns&#34;,&#34;score&#34;:&#34;20&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Falcons&#34;,&#34;score&#34;:&#34;23&#34;}},{&#34;date&#34;:&#34;2022-10-02T17:00Z&#34;,&#34;venue&#34;:&#34;AT&amp;T Stadium&#34;,&#34;name&#34;:&#34;Washington Commanders at Dallas Cowboys&#34;,&#34;shortName&#34;:&#34;WSH @ DAL&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Commanders&#34;,&#34;score&#34;:&#34;10&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Cowboys&#34;,&#34;score&#34;:&#34;25&#34;}},{&#34;date&#34;:&#34;2022-10-02T17:00Z&#34;,&#34;venue&#34;:&#34;Ford Field&#34;,&#34;name&#34;:&#34;Seattle Seahawks at Detroit Lions&#34;,&#34;shortName&#34;:&#34;SEA @ DET&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Seahawks&#34;,&#34;score&#34;:&#34;48&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Lions&#34;,&#34;score&#34;:&#34;45&#34;}},{&#34;date&#34;:&#34;2022-10-02T17:00Z&#34;,&#34;venue&#34;:&#34;Lucas Oil Stadium&#34;,&#34;name&#34;:&#34;Tennessee Titans at Indianapolis Colts&#34;,&#34;shortName&#34;:&#34;TEN @ IND&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Titans&#34;,&#34;score&#34;:&#34;24&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Colts&#34;,&#34;score&#34;:&#34;17&#34;}},{&#34;date&#34;:&#34;2022-10-02T17:00Z&#34;,&#34;venue&#34;:&#34;MetLife Stadium&#34;,&#34;name&#34;:&#34;Chicago Bears at New York Giants&#34;,&#34;shortName&#34;:&#34;CHI @ NYG&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Bears&#34;,&#34;score&#34;:&#34;12&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Giants&#34;,&#34;score&#34;:&#34;20&#34;}},{&#34;date&#34;:&#34;2022-10-02T17:00Z&#34;,&#34;venue&#34;:&#34;Lincoln Financial Field&#34;,&#34;name&#34;:&#34;Jacksonville Jaguars at Philadelphia Eagles&#34;,&#34;shortName&#34;:&#34;JAX @ PHI&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Jaguars&#34;,&#34;score&#34;:&#34;21&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Eagles&#34;,&#34;score&#34;:&#34;29&#34;}},{&#34;date&#34;:&#34;2022-10-02T17:00Z&#34;,&#34;venue&#34;:&#34;Acrisure Stadium&#34;,&#34;name&#34;:&#34;New York Jets at Pittsburgh Steelers&#34;,&#34;shortName&#34;:&#34;NYJ @ PIT&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Jets&#34;,&#34;score&#34;:&#34;24&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Steelers&#34;,&#34;score&#34;:&#34;20&#34;}},{&#34;date&#34;:&#34;2022-10-02T17:00Z&#34;,&#34;venue&#34;:&#34;M&amp;T Bank Stadium&#34;,&#34;name&#34;:&#34;Buffalo Bills at Baltimore Ravens&#34;,&#34;shortName&#34;:&#34;BUF @ BAL&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Bills&#34;,&#34;score&#34;:&#34;23&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Ravens&#34;,&#34;score&#34;:&#34;20&#34;}},{&#34;date&#34;:&#34;2022-10-02T17:00Z&#34;,&#34;venue&#34;:&#34;NRG Stadium&#34;,&#34;name&#34;:&#34;Los Angeles Chargers at Houston Texans&#34;,&#34;shortName&#34;:&#34;LAC @ HOU&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Chargers&#34;,&#34;score&#34;:&#34;34&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Texans&#34;,&#34;score&#34;:&#34;24&#34;}},{&#34;date&#34;:&#34;2022-10-02T20:05Z&#34;,&#34;venue&#34;:&#34;Bank of America Stadium&#34;,&#34;name&#34;:&#34;Arizona Cardinals at Carolina Panthers&#34;,&#34;shortName&#34;:&#34;ARI @ CAR&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Cardinals&#34;,&#34;score&#34;:&#34;26&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Panthers&#34;,&#34;score&#34;:&#34;16&#34;}},{&#34;date&#34;:&#34;2022-10-02T20:25Z&#34;,&#34;venue&#34;:&#34;Lambeau Field&#34;,&#34;name&#34;:&#34;New England Patriots at Green Bay Packers&#34;,&#34;shortName&#34;:&#34;NE @ GB&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Patriots&#34;,&#34;score&#34;:&#34;24&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Packers&#34;,&#34;score&#34;:&#34;27&#34;}},{&#34;date&#34;:&#34;2022-10-02T20:25Z&#34;,&#34;venue&#34;:&#34;Allegiant Stadium&#34;,&#34;name&#34;:&#34;Denver Broncos at Las Vegas Raiders&#34;,&#34;shortName&#34;:&#34;DEN @ LV&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Broncos&#34;,&#34;score&#34;:&#34;23&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Raiders&#34;,&#34;score&#34;:&#34;32&#34;}},{&#34;date&#34;:&#34;2022-09-30T00:15Z&#34;,&#34;venue&#34;:&#34;Paycor Stadium&#34;,&#34;name&#34;:&#34;Miami Dolphins at Cincinnati Bengals&#34;,&#34;shortName&#34;:&#34;MIA @ CIN&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Dolphins&#34;,&#34;score&#34;:&#34;15&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;Bengals&#34;,&#34;score&#34;:&#34;27&#34;}},{&#34;date&#34;:&#34;2022-10-04T00:15Z&#34;,&#34;venue&#34;:&#34;Levi&#39;s Stadium&#34;,&#34;name&#34;:&#34;Los Angeles Rams at San Francisco 49ers&#34;,&#34;shortName&#34;:&#34;LAR @ SF&#34;,&#34;awayTeam&#34;:{&#34;name&#34;:&#34;Rams&#34;,&#34;score&#34;:&#34;0&#34;},&#34;homeTeam&#34;:{&#34;name&#34;:&#34;49ers&#34;,&#34;score&#34;:&#34;0&#34;}}]} . Web Service . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Date; import java.util.HashMap; import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.*; @RestController // annotation to create a RESTful web services @RequestMapping(&quot;/api/covid&quot;) //prefix of API public class CovidApiController { private JSONObject body; //last run result private HttpStatus status; //last run status String last_run = null; //last run day of month // GET Covid 19 Stats @GetMapping(&quot;/daily&quot;) //added to end of prefix as endpoint public ResponseEntity&lt;JSONObject&gt; getCovid() { //calls API once a day, sets body and status properties String today = new Date().toString().substring(0,10); if (last_run == null || !today.equals(last_run)) { try { //APIs can fail (ie Internet or Service down) //RapidAPI header HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://nfl-schedule.p.rapidapi.com/v1/schedules&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;9fb1283360mshedc514375b603d6p156a26jsna7cd4ca5744a&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;nfl-schedule.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); //RapidAPI request and response HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); //JSONParser extracts text body and parses to JSONObject this.body = (JSONObject) new JSONParser().parse(response.body()); this.status = HttpStatus.OK; //200 success this.last_run = today; } catch (Exception e) { //capture failure info HashMap&lt;String, String&gt; status = new HashMap&lt;&gt;(); status.put(&quot;status&quot;, &quot;RapidApi failure: &quot; + e); //Setup object for error this.body = (JSONObject) status; this.status = HttpStatus.INTERNAL_SERVER_ERROR; //500 error this.last_run = null; } } //return JSONObject in RESTful style return new ResponseEntity&lt;&gt;(body, status); } } . .",
            "url": "https://kar722.github.io/fastpages/2022/10/02/Java-APIs.html",
            "relUrl": "/2022/10/02/Java-APIs.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Arrays and Images",
            "content": "import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private final String greyDir = &quot;images/tmp/greyscale/&quot;; private final String redDir = &quot;images/tmp/red/&quot;; private final String blueDir = &quot;images/tmp/blue/&quot;; private final String greenDir = &quot;images/tmp/green/&quot;; private String inFile; private String resizedFile; private String redFile; private String greenFile; private String blueFile; private String greyscaleFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyDir + name + &quot;_grey&quot; + &quot;.&quot; + ext; this.redFile = this.redDir + name + &quot;_red&quot; + &quot;.&quot; + ext; this.blueFile = this.blueDir + name + &quot;_blue&quot; + &quot;.&quot; + ext; this.greenFile = this.greenDir + name + &quot;_green&quot; + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void greyscale() { BufferedImage img = null; BufferedImage greyImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greyImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color( total, total, total ); greyImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greyImg), this.ext, new File(greyscaleFile)); } catch (IOException e) { return; } this.inFile = this.greyscaleFile; // use scaled file vs original file in Class this.setStats(); } public void redscale() { BufferedImage img = null; BufferedImage redImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data redImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) co.getRed(); int green = 0; int blue = 0; Color newColor = new Color( red, green, blue); redImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(redImg), this.ext, new File(redFile)); } catch (IOException e) { return; } this.inFile = this.redFile; // use scaled file vs original file in Class this.setStats(); } public void greenscale() { BufferedImage img = null; BufferedImage greenImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greenImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = 0; int green = (int) co.getGreen(); int blue = 0; Color newColor = new Color( red, green, blue); greenImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greenImg), this.ext, new File(greenFile)); } catch (IOException e) { return; } this.inFile = this.greenFile; // use scaled file vs original file in Class this.setStats(); } public void bluescale() { BufferedImage img = null; BufferedImage blueImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data blueImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color(0, 0, total); blueImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(blueImg), this.ext, new File(blueFile)); } catch (IOException e) { return; } this.inFile = this.blueFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { if (i % 2 != 0) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics messi = new Pics(&quot;messi&quot;, &quot;png&quot;); messi.greyscale(); messi.redscale(); messi.greenscale(); messi.bluescale(); messi.printStats(&quot;Original&quot;); messi.resize(33); messi.printStats(&quot;Scaled&quot;); messi.convertToAscii(); } } Pics.main(null); . Original: 6982622 1920x1920 images/messi.png Scaled: 6982622 1920x1920 images/messi.png .",
            "url": "https://kar722.github.io/fastpages/2022/10/02/Arrays-and-Images-Jupyter-Notebook.html",
            "relUrl": "/2022/10/02/Arrays-and-Images-Jupyter-Notebook.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Week 5 Design Starters",
            "content": "Hacks . Issue . Fibonacci . Class Running Fibonacci | . JavaScript CRUD Calendar . Sports Calendar | . Team Repo . TeamSports | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/09/25/Week-5-Learnings.html",
            "relUrl": "/markdown/2022/09/25/Week-5-Learnings.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Class Running Fibonacci",
            "content": "Fibo Class . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(10); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . While Loop . public class FiboWhile extends Fibo { public FiboWhile() { this(10); // telescope to avoid code duplication, using default } public FiboWhile(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboWhile wFib = new FiboWhile(); wFib.print(); } // Custom init using while loop instead protected void init() { this.name = &quot;While Loop&quot;; int i = 0; // new long array with only 0 long[] f = new long[] {0,1}; //while i is less than the length desired while (i &lt; this.size) { // sets data first, then adds to f this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; // adds to counter i++; } } } FiboWhile.main(null) . Init method = While Loop fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Recursion Loop . public class FiboRecur extends Fibo { public FiboRecur() { this(10); // telescope to avoid code duplication, using default } public FiboRecur(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboRecur rFib = new FiboRecur(); rFib.print(); } // Recursion function, using int i as a counter protected void recur(long[] f, int i) { // Sets data using beginning value this.setData(f[0]); // Cretes new long f = new long[]{f[1], f[0] + f[1]}; // Adds to counter i++; if (i &lt; this.size) { // Recusion continues if size limit has not been reached this.recur(f, i); } } // Custom init using recursion loop instead protected void init() { this.name = &quot;Recursion&quot;; // Uses int i as a counter for recusion, also creates initial long[] int i = 0; long[] f = new long[] {0,1}; // input long and counter i into recursion function this.recur(f, i); } } FiboRecur.main(null) . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . For Loop . public class FiboFor extends Fibo { public FiboFor() { this(10); // telescope to avoid code duplication, using default } public FiboFor(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } static public void main(String[] args) { FiboRecur rFib = new FiboRecur(); rFib.print(); } // Custom init using for loop instead protected void init() { this.name = &quot;For loop&quot;; // creates initial long[] long[] f = new long[] {0,1}; // iterates through until reaches desired length for (int i = 0; i &lt; this.size; i++) { // sets data, then updates f this.setData(f[0]); f = new long[] {f[1], f[0] + f[1]}; } } } FiboFor.main(null) . Init method = Recursion fibonacci Number 10 = 34 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] . Resources . https://www.geeksforgeeks.org/loops-in-java/ | https://www.programiz.com/java-programming/recursion | https://www.geeksforgeeks.org/program-for-nth-fibonacci-number/ | https://www.guru99.com/fibonacci-series-java.html | .",
            "url": "https://kar722.github.io/fastpages/2022/09/25/Fibonacci-Java-Jupyter-Notebook.html",
            "relUrl": "/2022/09/25/Fibonacci-Java-Jupyter-Notebook.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Week 4 Free Response Question No. 1",
            "content": "Hacks . Issue . FRQ No. 1: Methods and control structures . 2007 AP CSA Free Response Question | . Iteration with 2D Array . Iteration with 2D Array Hack - 2018 WC | . Iteration with 2D Array Questions . Is this program in more of an Imperative Programming Style or OOP style? Explain. . This program is a more object oriented style as objects and variables such as the MonkeyLoop are stored and later accessed in the public void variable printPoem. | The monkeys seem to act as an object in the program. | . Loops Process . Initialization: It is the initial condition which is executed once when the loop starts. Here, we can initialize the variable, or we can use an already initialized variable. It is an optional condition. | Condition: It is the second condition which is executed each time to test the condition of the loop. It continues execution until the condition is false. It must return boolean value either true or false. It is an optional condition. | Increment/Decrement: It increments or decrements the variable value. It is an optional condition. | Statement: The statement of the loop is executed each time until the second condition is false. | . Zero based counting . Zero-based numbering is a way of numbering in which the initial element of a sequence is assigned the index 0, rather than the index 1. | . Declaring 2D Arrays . In Java, 2D arrays are stored as arrays of arrays. Therefore, the way 2D arrays are declared is similar 1D array objects. 2D arrays are declared by defining a data type followed by two sets of square brackets. | . Accessing 2D Array Elements . In Java, when accessing the element from a 2D array using arr[first][second], the first index can be thought of as the desired row, and the second index is used for the desired column. Just like 1D arrays, 2D arrays are indexed starting at 0. | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/09/18/Week-4-Learnings.html",
            "relUrl": "/markdown/2022/09/18/Week-4-Learnings.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Iteration with 2D Array Hack - 2018 WC",
            "content": "/** * Class for wcTeams: a 2D array of wcTeams * As well as method to print the Poem */ class WcLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] wcTeams; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of wcTeams */ public WcLoop() { //Storing Data in 2D arrays wcTeams = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //France { &quot;France (Antoine Griezmann)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__7__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Croatia { &quot;Croatia (Luka Modric)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__10__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Belgium { &quot;Belgium (Eden Hazard)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__10__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //England { &quot;England (Harry Kane)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__10__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Russia { &quot;Russia (Denis Cheryshev)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__6__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Brazil { &quot;Brazil (Neymar Jr.)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__10__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Uruguay { &quot;Uruguay (Luis Suarez)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__9__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, //Sweden { &quot;Sweden (Emil Forsberg)&quot;, &quot; |.|&quot;, &quot; ]^[&quot;, &quot; ,-|||~ &quot;, &quot; {&lt;|||||&gt;}&quot;, &quot; |||||/&quot;, &quot; {/ /}&quot;, &quot; /__10__ &quot;, &quot; | / / |&quot;, &quot; (&lt; &gt;)&quot;, &quot; _|) (|_&quot;, &quot;,.,.( |.,.| ).,.,.&quot; }, }; } /** * Loop and print wcTeams in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;2018 World Cup Quarter Finalists&quot;); // wcTeams (non-primitive) defined in constructor knows its length int teamsCount = wcTeams.length; for (int i = teamsCount; i &gt;= 1; i/=2) //loops through 2D array length backwards { //this print statement shows current count of wcTeams // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; wcTeams left...&quot;); //how many separate parts are there in a world cup teams world cup teams? for (int row = 0; row &lt; teamsCount; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each world cup teams part by part, will eventually print entire column*/ for (int col = 0; col &lt; wcTeams[row].length; col++) { // prints specific part of the world cup teams from the column System.out.print(wcTeams[row][col] + &quot; &quot;); //this is new line between separate parts System.out.println(); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing teamsCount variable by 1 teamsCount /= 2; } //out of all the loops, prints finishing messages System.out.println(&quot;France Wins the WC&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); System.out.println(&quot; .-=========-.&quot;); System.out.println(&quot; /&#39;-=======-&#39;/&quot;); System.out.println(&quot; _| .=. |_&quot;); System.out.println(&quot; ((|{{France}}|))&quot;); System.out.println(&quot; /| /|/ |/&quot;); System.out.println(&quot; /_2018_WC__/&quot;); System.out.println(&quot; _`) (`_ &quot;); System.out.println(&quot; _/_______/_&quot;); System.out.println(&quot; //___________ &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new WcLoop().printPoem(); //a new world cup teams list and output in one step } } WcLoop.main(null); . 2018 World Cup Quarter Finalists 8 wcTeams left... France (Antoine Griezmann) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__7__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Croatia (Luka Modric) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Belgium (Eden Hazard) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. England (Harry Kane) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Russia (Denis Cheryshev) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__6__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Brazil (Neymar Jr.) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Uruguay (Luis Suarez) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__9__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Sweden (Emil Forsberg) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. 4 wcTeams left... France (Antoine Griezmann) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__7__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Croatia (Luka Modric) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Belgium (Eden Hazard) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. England (Harry Kane) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. 2 wcTeams left... France (Antoine Griezmann) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__7__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. Croatia (Luka Modric) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__10__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. 1 wcTeams left... France (Antoine Griezmann) |.| ]^[ ,-|||~ {&lt;|||||&gt;} |||||/ {/ /} /__7__ | / / | (&lt; &gt;) _|) (|_ ,.,.( |.,.| ).,.,. France Wins the WC 0000000000000000000000000000000000 THE END .-=========-. /&#39;-=======-&#39;/ _| .=. |_ ((|{{France}}|)) /| /|/ |/ /_2018_WC__/ _`) (`_ _/_______/_ //___________ .",
            "url": "https://kar722.github.io/fastpages/2022/09/18/2D-Iteration-Array-Jupyter-Notebook.html",
            "relUrl": "/2022/09/18/2D-Iteration-Array-Jupyter-Notebook.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "2007 AP CSA Free Response Question",
            "content": "Source: https://secure-media.collegeboard.org/apc/ap07_comp_sci_a_frq.pdf . 1. A positive integer is called a &quot;self-divisor&quot; if every decimal digit of the number is a divisor of the number, that is, the number is evenly divisible by each and every one of its digits. For example, the number 128 is a selfdivisor because it is evenly divisible by 1, 2, and 8. However, 26 is not a self-divisor because it is not evenly divisible by the digit 6. Note that 0 is not considered to be a divisor of any number, so any number containing a 0 digit is NOT a self-divisor. There are infinitely many self-divisors. . (a) Write method isSelfDivisor, which takes a positive integer as its parameter. This method returns true if the number is a self-divisor; otherwise, it returns false. . Complete method isSelfDivisor below . /** @param number the number to be tested * Precondition: number 0 &gt; * @return true if every decimal digit of number is a divisor of number; * false otherwise */ public static boolean isSelfDivisor(int number) { int copyNumber = number; // define int copy of number so original number is not altered while (number &gt; 0) { // number has to be greater than 0 int lastDigit = number % 10; // to retract the last digit of the number ex: 135/10 = 130 R 5 --&gt; 135 % 10 is 5 --&gt; 5 is also the last digit if (lastDigit == 0 || copyNumber % lastDigit != 0) { // if last digit is equal to 0 then the number is not a self divisor as any number/0 is undefined // OR if the remainder of the number divided by its last digit does NOT give you 0 then the number is not a self divisor return false; } number /= 10; // divide number by 10 and make number the result same as number = number/10 // iterate through the loop until the all digits in the number are checked to be divisible with the number } return true; } // Tester System.out.println(&quot;128: &quot; + isSelfDivisor(128)); System.out.println(&quot;26: &quot; + isSelfDivisor(26)); . 128: true 26: false . (b) Write method firstNumSelfDivisors, which takes two positive integers as parameters, representing a start value and a number of values. Method firstNumSelfDivisors returns an array of size num that contains the first num self-divisors that are greater than or equal to start. . For example, the call firstNumSelfDivisors(10, 3) should return an array containing the values 11, 12, and 15, because the first three self-divisors that are greater than or equal to 10 are 11, 12, and 15. In writing firstNumSelfDivisors, assume that isSelfDivisor works as specified, regardless of what you wrote in part (a). . Complete method firstNumSelfDivisors below. . public static boolean isSelfDivisor(int number) { int copyNumber = number; // define int copy of number so original number is not altered while (number &gt; 0) { // number has to be greater than 0 int lastDigit = number % 10; // to retract the last digit of the number ex: 135/10 = 130 R 5 --&gt; 135 % 10 is 5 --&gt; 5 is also the last digit if (lastDigit == 0 || copyNumber % lastDigit != 0) { // if last digit is equal to 0 then the number is not a self divisor as any number/0 is undefined // OR if the remainder of the number divided by its last digit does NOT give you 0 then the number is not a self divisor return false; } number /= 10; // divide number by 10 and make number the result same as number = number/10 // iterate through the loop until the all digits in the number are checked to be divisible with the number } return true; } /** * @param start starting point for values to be checked * Precondition: start &gt; 0 * @param num the size of the array to be returned * Precondition: num 0 &gt; * @return an array containing the first num integers ≥ start that are * self-divisors */ public static int[] firstNumSelfDivisors(int start, int num) { int[] selfs = new int[num]; // make an array of integers, num is the amount of numbers we want inside of it int index = 0; // start index at 0 while (index &lt; num) { // as long as the index is less than the last number if (isSelfDivisor(start)) { // iterate through the numbers starting with the first number, &#39;start&#39; to check if they are self divisors selfs[index] = start; // if isSelfDivisor returns true --&gt; add number to the empty array index++; // go onto the next index } start++; // go onto the next value } return selfs; // return array } // Tester System.out.println(&quot;Self Divisors from 10 - 3: &quot;); for (int n : firstNumSelfDivisors(10, 3)) { System.out.print(n + &quot;, &quot;); } . Self Divisors from 10 - 3: 11, 12, 15, . Full 2007 Q1 Code . public class Main { /*** Part A ***/ /** * @param number the number to be tested * Precondition: number &gt; 0 * @return true if every decimal digit of number is a divisor of number; * false otherwise */ public static boolean isSelfDivisor(int number) { int copyNumber = number; // define int copy of number so original number is not altered while (number &gt; 0) { // number has to be greater than 0 int lastDigit = number % 10; // to retract the last digit of the number ex: 135/10 = 130 R 5 --&gt; 135 % 10 is 5 --&gt; 5 is also the last digit if (lastDigit == 0 || copyNumber % lastDigit != 0) { // if last digit is equal to 0 then the number is not a self divisor as any number/0 is undefined // OR if the remainder of the number divided by its last digit does NOT give you 0 then the number is not a self divisor return false; } number /= 10; // divide number by 10 and make number the result same as number = number/10 // iterate through the loop until the all digits in the number are checked to be divisible with the number } return true; } /*** Part B ***/ /** * @param start starting point for values to be checked * Precondition: start &gt; 0 * @param num the size of the array to be returned * Precondition: num 0 &gt; * @return an array containing the first num integers ≥ start that are * self-divisors */ public static int[] firstNumSelfDivisors(int start, int num) { int[] selfs = new int[num]; // make an array of integers, num is the amount of numbers we want inside of it int index = 0; // start index at 0 while (index &lt; num) { // as long as the index is less than the last number if (isSelfDivisor(start)) { // iterate through the numbers starting with the first number, &#39;start&#39; to check if they are self divisors selfs[index] = start; // if isSelfDivisor returns true --&gt; add number to the empty array index++; // go onto the next index } start++; // go onto the next value } return selfs; // return array } // Test example values from the question public static void main(String[] args) { System.out.println(&quot;128 &quot; + isSelfDivisor(128)); System.out.println(&quot;26: &quot; + isSelfDivisor(26)); // print the array System.out.println(&quot;Self Divisors from 10 - 3: &quot;); for (int n : firstNumSelfDivisors(10, 3)) { System.out.print(n + &quot;, &quot;); } } } Main.main(null) . 128 true 26: false Self Divisors from 10 - 3: 11, 12, 15, . Resources . https://www.tutorialspoint.com/java/java_basic_operators.htm | https://www.edureka.co/community/2687/how-can-i-separate-the-digits-of-an-int-number-in-java | https://www.w3schools.com/java/java_arrays.asp | https://www.programiz.com/article/increment-decrement-operator-difference-prefix-postfix | https://www.programiz.com/java-programming/examples/print-array | .",
            "url": "https://kar722.github.io/fastpages/2022/09/15/FRQ-1-Juypter-Notebook.html",
            "relUrl": "/2022/09/15/FRQ-1-Juypter-Notebook.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Week 3 Backend Development",
            "content": "Hacks . Issue . Fastpages Boolean Expressions and If Statements Notebook . Java Notebook | . Deployment . URL . | Repo . | . Focus/Habits . Post | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/09/11/Week-3-Backend-Development-Notebook.html",
            "relUrl": "/markdown/2022/09/11/Week-3-Backend-Development-Notebook.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Week 3 Focus/Habits",
            "content": "Life goals . Bench 225 | . | Boxing Evan | . | Get a high paying job | . | Buy my parents a mansion | . | Lamborghini | . | . Psychology and the Good Life . Simply getting better after therapy doesn’t tell you anything. | It just means that the day after the worst day of your life usually is not as bad as the worst day of your life. It can get worse, but usually it just trends to average. | So, this is for people who are depressed. This is statistically equal. | It’s random, which is — which — making it a very good experiment. | was very depressing but the good news is that in some sense I had some hope and I had some hope because I’m an academic | psychologist I studied decision making in primates but I study the field of psychology broadly and knowing that I | had expertise on the idea that we could do something there is kind of a light bulb moment where I realized that the | science of psychology neuroscience all the mine sciences could help us here and | get more meaning in your life and the science comes from two different domains one domain is this domain of positive | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/09/11/Psychology-and-the-Good-Life.html",
            "relUrl": "/markdown/2022/09/11/Psychology-and-the-Good-Life.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Jupyter Notebook Lesson on "if" Statements",
            "content": "if statements are used to run a method based on if something specifically described happens. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (x &gt; y) { System.out.println(x + &quot; is greater than &quot; + y); } . Enter the first number: 12.2 Enter the second number: 4.7 12.2 is greater than 4.7 . if-else -- if the specific condition is true then proceed below and run the method BUT if the condition is false then proceed with the different set of instructions defined . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (x &gt; y) { System.out.println(x + &quot; is greater than &quot; + y); } else { System.out.println(y + &quot; is greater than &quot; + x); } . Enter the first number: 3.9 Enter the second number: 5.78 5.78 is greater than 3.9 . if-elseif-else -- if the specific condition is true then proceed below and run the method BUT if the condition is not met try the next condition and if the condition is met run this code segment now if both of the conditions are false then proceed with the different set of instructions defined . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (x &gt; y) { System.out.println(x + &quot; is greater than &quot; + y); } else if (x == y) { System.out.println(x + &quot; is equal to &quot; + y); } else { System.out.println(y + &quot; is greater than &quot; + x); } . Enter the first number: 11.78 Enter the second number: 11.78 11.78 is equal to 11.78 . Create and if-elseif-elseif-elsif-else statement, 5 or more conditions. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); double x; double y; System.out.print(&quot;Enter the first number: &quot;); x = scanner.nextDouble(); System.out.println(x); System.out.print(&quot;Enter the operator (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;Enter the second number: &quot;); y = scanner.nextDouble(); System.out.println(y); if (operator == &#39;+&#39;) { System.out.println(x + y); } else if (operator == &#39;-&#39;) { System.out.println(x - y); } else if (operator == &#39;*&#39;) { System.out.println(x * y); } else if (operator == &#39;/&#39;) { System.out.println(x / y); } else { System.out.println(&quot;Invalid operator&quot;); } . Enter the first number: 44.1 Enter the operator (+,-,*,/): / Enter the second number: 5.3 8.320754716981133 . Covert the 5 or more decisions to a switch-case-case-case-case-otherwise. . double num1, num2; // Take input from the user Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter the first number: &quot;); // take the inputs num1 = scanner.nextDouble(); System.out.println(num1); System.out.print(&quot;Enter the operator (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;Enter second number: &quot;); num2 = scanner.nextDouble(); System.out.println(num2); double output = 0; switch (operator) { // case to add two numbers case &#39;+&#39;: output = num1 + num2; break; // case to subtract two numbers case &#39;-&#39;: output = num1 - num2; break; // case to multiply two numbers case &#39;*&#39;: output = num1 * num2; break; // case to divide two numbers case &#39;/&#39;: output = num1 / num2; break; default: System.out.println(&quot;Invalid input&quot;); break; } System.out.println(&quot;The final result: &quot;); // print the final result System.out.println(num1 + &quot; &quot; + operator + &quot; &quot; + num2 + &quot; = &quot; + output); . Enter the first number: 45.0 Enter the operator (+,-,*,/): / Enter second number: 4.4 The final result: 45.0 / 4.4 = 10.227272727272727 . De Morgan&#39;s Law . DeMorgan’s laws were developed by Augustus De Morgan in the 1800s. They show how to handle the negation of a complex conditional, which is a conditional statement with more than one condition joined by an and (&amp;&amp;) or or (||), such as (x &lt; 3) &amp;&amp; (y &gt; 2). . not (a and b) is the same as (not a) or (not b). In Java this is written as !(a &amp;&amp; b) == !a || !b . not (a or b) is the same as (not a) and (not b). In Java this is written as !(a || b) == !a &amp;&amp; !b . The negation modifies each conditional: . &lt; becomes &gt;= | becomes &lt;= . | == becomes != | &lt;= becomes &gt; | = becomes &lt; . | != becomes == | . public class DeMorgansAndTest { public static void main(String[] args) { int x = 7; int y = 16; System.out.println(!(x &gt; 6 &amp;&amp; y &lt; 3)); // prints true if x is not &gt; 6 OR y is not &lt; 3 // prints false otherwise // this output should be true as x IS &gt; 6 BUT y IS NOT &lt; 3 } } DeMorgansAndTest.main(null) . true . public class DeMorgansOrTest { public static void main(String[] args) { int x = 0; int y = 5; System.out.println(!(x &lt; 3 || y &gt; 2)); // prints true if x is not &lt; 3 AND y is not &gt; 2 // prints false otherwise // this output should be false as x IS &gt; 3 AND y IS &gt; 2 } } DeMorgansOrTest.main(null) . false . Resources . https://www.w3schools.com/java/java_conditions.asp | https://www.javatpoint.com/java-if-else | https://www.programiz.com/java-programming/if-else-statement | https://docs.oracle.com/javase/tutorial/java/nutsandbolts/if.html | https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html | https://www.w3schools.com/java/java_switch.asp | .",
            "url": "https://kar722.github.io/fastpages/2022/09/09/Java-Week-3-Notebook.html",
            "relUrl": "/2022/09/09/Java-Week-3-Notebook.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Java Objects Notebook",
            "content": "// imports allow you to use code already written by others. It is good to explore and learn libraries. The names around the dots often give you a hint to the originator of the code. import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers import java.io.*; // library for input output classes import java.io.File; public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes public static final String ANSI_RESET = &quot; u001B[0m&quot;; public static final String ANSI_BLACK = &quot; u001B[30m&quot;; public static final String ANSI_RED = &quot; u001B[31m&quot;; public static final String ANSI_GREEN = &quot; u001B[32m&quot;; public static final String ANSI_YELLOW = &quot; u001B[33m&quot;; public static final String ANSI_BLUE = &quot; u001B[34m&quot;; public static final String ANSI_PURPLE = &quot; u001B[35m&quot;; public static final String ANSI_CYAN = &quot; u001B[36m&quot;; public static final String ANSI_WHITE = &quot; u001B[37m&quot;; // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Math&quot;); System.out.println(&quot;2 - Physics&quot;); System.out.println(&quot;3 - English&quot;); System.out.println(&quot;4 - Karthik &gt; Evan in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) throws Exception { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Cya!&quot;); quit = true; break; case 1: System.out.println(&quot;Math Calculator: &quot;); // stores two numbers double num1, num2; // Take input from the user Scanner scanner = new Scanner(System.in); System.out.print(&quot;Enter the first number: &quot;); // take the inputs num1 = scanner.nextDouble(); System.out.println(num1); System.out.print(&quot;Enter the operator (+,-,*,/): &quot;); char operator = scanner.next().charAt(0); System.out.println(operator); System.out.print(&quot;Enter second number: &quot;); num2 = scanner.nextDouble(); System.out.println(num2); double output = 0; switch (operator) { // case to add two numbers case &#39;+&#39;: output = num1 + num2; break; // case to subtract two numbers case &#39;-&#39;: output = num1 - num2; break; // case to multiply two numbers case &#39;*&#39;: output = num1 * num2; break; // case to divide two numbers case &#39;/&#39;: output = num1 / num2; break; default: System.out.println(&quot;Invalid input&quot;); break; } System.out.println(&quot;The final result: &quot;); // print the final result System.out.println(num1 + &quot; &quot; + operator + &quot; &quot; + num2 + &quot; = &quot; + output); System.out.println(); System.out.println(ANSI_RED + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 2: System.out.println(&quot;Physics (F = m*a) Calculator&quot;); // force calcultor // initialize scanner input Scanner input; // initialize integers to be used for the input and to be displayed at the very end double force = 0.0; double mass = 0.0; double acceleration = 0.0; // initialize strings to be used for the input and to be displayed at the very end String finalString; // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter force(kg): &quot;); try { mass = input.nextDouble(); System.out.println(mass); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter acceleration(m/s²): &quot;); try { acceleration = input.nextDouble(); System.out.println(acceleration); } catch (Exception e) { // if not a number System.out.println(&quot;Not an double (form like 9.99), &quot; + e); } input.close(); // math operation for finding force = mass x acceleration force = mass * acceleration; // final formatted string with both variables finalString = &quot;force(N) = &quot; + force; System.out.println(finalString); System.out.println(); System.out.println(ANSI_YELLOW + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 3: System.out.print(&quot;English Spell Checker...&quot;); Scanner write = new Scanner(System.in); System.out.println(&quot;Enter a sentence and the program will check if you made any spelling mistakes or if the word is not in the dictionary: &quot;); String sentence = write.nextLine(); System.out.println(sentence); String[] splitSentence = sentence.split(&quot; &quot;); for(int i = 0; i &lt; splitSentence.length; i++) { Scanner read = new Scanner(new File(&quot;dictionary.txt&quot;)); boolean found = false; while(read.hasNextLine()) { String compare = read.nextLine(); if(compare.equalsIgnoreCase(splitSentence[i])) { System.out.println(splitSentence[i] + &quot; : correct&quot;); found=true; break; } } if(!found) System.out.println(splitSentence[i] + &quot; : incorrect&quot;); } System.out.println(); System.out.println(ANSI_BLUE + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; case 4: for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot; Karthik &gt; Evan &quot;); } System.out.println(); System.out.println(); System.out.println(ANSI_WHITE + &quot;Enter Another option from the menu: &quot; + ANSI_RESET); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Math 2 - Physics 3 - English 4 - Karthik &gt; Evan in color 0 - Quit - 1: Math Calculator: Enter the first number: 76.1 Enter the operator (+,-,*,/): * Enter second number: 54.1 The final result: 76.1 * 54.1 = 4117.01 Enter Another option from the menu: 2: Physics (F = m*a) Calculator Enter force(kg): 760.22 Enter acceleration(m/s²): 134.0 force(N) = 101869.48000000001 Enter Another option from the menu: 3: English Spell Checker...Enter a sentence and the program will check if you made any spelling mistakes or if the word is not in the dictionary: hey mr mort i dont like making spellung mistakes hey : correct mr : correct mort : correct i : correct dont : incorrect like : correct making : correct spellung : incorrect mistakes : correct Enter Another option from the menu: 4: Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Karthik &gt; Evan Enter Another option from the menu: 0: Cya! .",
            "url": "https://kar722.github.io/fastpages/2022/09/04/Java-Objects-Juypter-Notebook.html",
            "relUrl": "/2022/09/04/Java-Objects-Juypter-Notebook.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Week 2 Innovation - Using Objects",
            "content": "Hacks . Issue . Part 1 Fastpages . Java Objects Notebook | . Code.org Learning (1-15 Done) . Key Learnings w/ Code Snippets | . .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/09/02/Innovation-Using-Objects.html",
            "relUrl": "/markdown/2022/09/02/Innovation-Using-Objects.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Week 1 Innovation - Primitives",
            "content": "Hacks . Issue . Part 1 Fastpages . Bash Notebook | Java Primitives Notebook | . Code.org Learning . Capture information that will grow to 10 CB Units . Watch main daily videos on CollegeBoard capture key code segments into jupyter notebooks organized by units | . | Practice AP Frqs and MCs all throughout the year but more and more as we get closer to the AP test date | CollegeBoard work is more essential for AP test and PBLs can help with AP test if CollegeBoard key concepts are used | . As AP Test date gets closer I will: . Assess my strengths and weakness focuses on making my weaknesses my strengths by reviewing old material as well as finding new material | . | Practice MC questions | Practice FRQs | Take full practice tests | .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/08/28/Primitives.html",
            "relUrl": "/markdown/2022/08/28/Primitives.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Java Primitives Notebook",
            "content": "import java.util.Scanner; public class ppg { public static void main(String[] args) { // NBA PPG calculator // initialize scanner input Scanner input; // initialize integers to be used for the input and to be displayed at the very end int totalPoints = 0; int gamesPlayed = 0; double ppg = 0.0; // initialize strings to be used for the input and to be displayed at the very end String player = null; String season = null; String finalString; // input for the players name // primitive string input = new Scanner(System.in); System.out.print(&quot;Enter player name: &quot;); try { player = input.nextLine(); System.out.println(player); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); // input for the season date // primitive string input = new Scanner(System.in); System.out.print(&quot;Which NBA season? (Ex: 2021/22): &quot;); try { season = input.nextLine(); System.out.println(season); } catch (Exception e) { // this may never happen System.out.println(&quot;Not an String, &quot; + e); } input.close(); // input total points scored during that season // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter total points: &quot;); try { totalPoints = input.nextInt(); System.out.println(totalPoints); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // input total games played during that season // primitive int input = new Scanner(System.in); System.out.print(&quot;Enter games played: &quot;); try { gamesPlayed = input.nextInt(); System.out.println(gamesPlayed); } catch (Exception e) { // if not an integer System.out.println(&quot;Not an integer (form like 159), &quot; + e); } input.close(); // math operation for finding average points scored per game during that season ppg = totalPoints / gamesPlayed; // final formatted string with both variables finalString = player + &quot; averaged &quot; + ppg + &quot; points per game (ppg) during the &quot; + season + &quot; NBA season&quot;; System.out.println(finalString); } } // running the class ppg.main(null); . Enter player name: Anthony Davis Which NBA season? (Ex: 2021/22): 2019/20 Enter total points: 1618 Enter games played: 62 Anthony Davis averaged 26.0 points per game (ppg) during the 2019/20 NBA season .",
            "url": "https://kar722.github.io/fastpages/2022/08/28/Java-Primitives-Jupyter-Notebook.html",
            "relUrl": "/2022/08/28/Java-Primitives-Jupyter-Notebook.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "TT 1.0.0 Tools and Equipment",
            "content": "Hacks . Issue . Part 1 Fastpages . Python Jupyter Notebook | Java Jupyter Notebook | | Github Insights for FastPages | Github Insights for CSA Project | . Part 2 Java Project . . Spring Portfolio Commit | . Issue .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/08/21/Tools-and-Equipment.html",
            "relUrl": "/markdown/2022/08/21/Tools-and-Equipment.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Python Jupyter Notebook",
            "content": "Python &quot;hello world&quot; via Jupyter Notebook . Hello I&#39;m Karthik . print(&quot;hello world&quot;) . hello world .",
            "url": "https://kar722.github.io/fastpages/2022/08/21/Python-Jupyter-Notebook.html",
            "relUrl": "/2022/08/21/Python-Jupyter-Notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Java Notebook",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! .",
            "url": "https://kar722.github.io/fastpages/2022/08/21/Java-Jupyter-Notebook.html",
            "relUrl": "/2022/08/21/Java-Jupyter-Notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Week 2 Code.org 6-15",
            "content": "Lesson 6 . Inheritance in Java is a concept that acquires the properties from one class to other classes. Classes can be derived from classes in Java. The derived class (the class that is derived from another class) is called a subclass. The class from which its derived is called the superclass. . Lesson 10 . In this example, the extend keywords indicates that the PainterPlus class inherits or acquires all the properties of the Painter class. All of the public void variables created in the PainterPlus.java file can be used in the main MyNeighborhood.java file because it is extended. . PainterPlus.java . . MyNeighborhood.java . . Lesson 14 . PainterPlus.java . PainterPlus extends everything from the Painter parent class. . PatternPainter.java . PatternPainter extendes everyhing from the PainterPlus class so it extends from the Painter class as well. . BackgroundPainter.java . BackgroundPainter extendes everyhing from the PatternPainter class so it extends from the and PainterPlus and Painter class as well. .",
            "url": "https://kar722.github.io/fastpages/markdown/2022/08/21/Code.org-learnings.html",
            "relUrl": "/markdown/2022/08/21/Code.org-learnings.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kar722.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kar722.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kar722.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}